/**
 * MITx Online API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v2)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * * `anytime` - anytime * `dated` - dated
 * @export
 * @enum {string}
 */
export declare const AvailabilityEnum: {
    /**
    * anytime
    */
    readonly Anytime: "anytime";
    /**
    * dated
    */
    readonly Dated: "dated";
};
export type AvailabilityEnum = typeof AvailabilityEnum[keyof typeof AvailabilityEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const BlankEnum: {
    readonly Empty: "";
};
export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];
/**
 * Serializer for certificate pages, including overrides and signatory items.
 * @export
 * @interface CertificatePage
 */
export interface CertificatePage {
    /**
     *
     * @type {number}
     * @memberof CertificatePage
     */
    'id': number;
    /**
     *
     * @type {PageMeta}
     * @memberof CertificatePage
     */
    'meta': PageMeta;
    /**
     *
     * @type {string}
     * @memberof CertificatePage
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CertificatePage
     */
    'product_name': string;
    /**
     *
     * @type {string}
     * @memberof CertificatePage
     */
    'CEUs': string;
    /**
     *
     * @type {Array<Override>}
     * @memberof CertificatePage
     */
    'overrides': Array<Override>;
    /**
     *
     * @type {Array<SignatoryItem>}
     * @memberof CertificatePage
     */
    'signatory_items': Array<SignatoryItem>;
}
/**
 * Serializer for a list of certificate pages.
 * @export
 * @interface CertificatePageList
 */
export interface CertificatePageList {
    /**
     *
     * @type {PageListMeta}
     * @memberof CertificatePageList
     */
    'meta': PageListMeta;
    /**
     *
     * @type {Array<CertificatePage>}
     * @memberof CertificatePageList
     */
    'items': Array<CertificatePage>;
}
/**
 * Extends the CertificatePageSerializer to work with a model object.
 * @export
 * @interface CertificatePageModel
 */
export interface CertificatePageModel {
    /**
     *
     * @type {number}
     * @memberof CertificatePageModel
     */
    'id': number;
    /**
     *
     * @type {PageMetaModel}
     * @memberof CertificatePageModel
     */
    'meta': PageMetaModel;
    /**
     *
     * @type {string}
     * @memberof CertificatePageModel
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CertificatePageModel
     */
    'product_name': string;
    /**
     *
     * @type {string}
     * @memberof CertificatePageModel
     */
    'CEUs': string;
    /**
     *
     * @type {Array<Override>}
     * @memberof CertificatePageModel
     */
    'overrides': Array<Override>;
    /**
     *
     * @type {Array<SignatoryItem>}
     * @memberof CertificatePageModel
     */
    'signatory_items': Array<SignatoryItem>;
}
/**
 * Serializer for starting a user email change
 * @export
 * @interface ChangeEmailRequestCreate
 */
export interface ChangeEmailRequestCreate {
    /**
     *
     * @type {string}
     * @memberof ChangeEmailRequestCreate
     */
    'new_email': string;
}
/**
 * Serializer for starting a user email change
 * @export
 * @interface ChangeEmailRequestCreateRequest
 */
export interface ChangeEmailRequestCreateRequest {
    /**
     *
     * @type {string}
     * @memberof ChangeEmailRequestCreateRequest
     */
    'new_email': string;
    /**
     *
     * @type {string}
     * @memberof ChangeEmailRequestCreateRequest
     */
    'password': string;
}
/**
 * Serializer for confirming a user email change
 * @export
 * @interface ChangeEmailRequestUpdate
 */
export interface ChangeEmailRequestUpdate {
    /**
     *
     * @type {boolean}
     * @memberof ChangeEmailRequestUpdate
     */
    'confirmed': boolean;
}
/**
 * Serializer for confirming a user email change
 * @export
 * @interface ChangeEmailRequestUpdateRequest
 */
export interface ChangeEmailRequestUpdateRequest {
    /**
     *
     * @type {boolean}
     * @memberof ChangeEmailRequestUpdateRequest
     */
    'confirmed': boolean;
}
/**
 * * `None` - ---- * `1` - Small/Start-up (1+ employees) * `9` - Small/Home office (1-9 employees) * `99` - Small (10-99 employees) * `999` - Small to medium-sized (100-999 employees) * `9999` - Medium-sized (1000-9999 employees) * `10000` - Large Enterprise (10,000+ employees) * `0` - Other (N/A or Don\'t know)
 * @export
 * @enum {number}
 */
export declare const CompanySizeEnum: {
    /**
    * Small/Start-up (1+ employees)
    */
    readonly NUMBER_1: 1;
    /**
    * Small/Home office (1-9 employees)
    */
    readonly NUMBER_9: 9;
    /**
    * Small (10-99 employees)
    */
    readonly NUMBER_99: 99;
    /**
    * Small to medium-sized (100-999 employees)
    */
    readonly NUMBER_999: 999;
    /**
    * Medium-sized (1000-9999 employees)
    */
    readonly NUMBER_9999: 9999;
    /**
    * Large Enterprise (10,000+ employees)
    */
    readonly NUMBER_10000: 10000;
    /**
    * Other (N/A or Don&#39;t know)
    */
    readonly NUMBER_0: 0;
};
export type CompanySizeEnum = typeof CompanySizeEnum[keyof typeof CompanySizeEnum];
/**
 * Serializer for the ContractPage model.
 * @export
 * @interface ContractPage
 */
export interface ContractPage {
    /**
     *
     * @type {number}
     * @memberof ContractPage
     */
    'id': number;
    /**
     * The name of the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'name': string;
    /**
     * Any useful extra information about the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'description': string;
    /**
     * The type of integration for this contract.  * `sso` - SSO * `non-sso` - Non-SSO
     * @type {IntegrationTypeEnum}
     * @memberof ContractPage
     */
    'integration_type': IntegrationTypeEnum;
    /**
     * The organization this contract is with.
     * @type {number}
     * @memberof ContractPage
     */
    'organization': number;
    /**
     * The start date of the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'contract_start': string | null;
    /**
     * The end date of the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'contract_end': string | null;
    /**
     * Whether this contract is active or not. Date rules still apply.
     * @type {boolean}
     * @memberof ContractPage
     */
    'active': boolean;
    /**
     * The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/
     * @type {string}
     * @memberof ContractPage
     */
    'slug': string;
}
/**
 * Serializer for pycountry countries, with states for US/CA
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * Get the country alpha_2 code
     * @type {string}
     * @memberof Country
     */
    'code': string;
    /**
     * Get the country name (common name preferred if available)
     * @type {string}
     * @memberof Country
     */
    'name': string;
    /**
     * Get a list of states/provinces if USA or Canada
     * @type {Array<{ [key: string]: any; }>}
     * @memberof Country
     */
    'states': Array<{
        [key: string]: any;
    }>;
}
/**
 * Course model serializer
 * @export
 * @interface Course
 */
export interface Course {
    /**
     *
     * @type {number}
     * @memberof Course
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof Course
     */
    'next_run_id': number | null;
    /**
     *
     * @type {Array<Department>}
     * @memberof Course
     */
    'departments': Array<Department>;
    /**
     *
     * @type {CoursePage}
     * @memberof Course
     */
    'page': CoursePage;
    /**
     *
     * @type {Program}
     * @memberof Course
     */
    'programs': Program | null;
}
/**
 * Course page model serializer
 * @export
 * @interface CoursePage
 */
export interface CoursePage {
    /**
     * Serializes the source of the feature_image
     * @type {string}
     * @memberof CoursePage
     */
    'feature_image_src': string;
    /**
     *
     * @type {string}
     * @memberof CoursePage
     */
    'page_url': string;
    /**
     *
     * @type {string}
     * @memberof CoursePage
     */
    'description': string;
    /**
     *
     * @type {boolean}
     * @memberof CoursePage
     */
    'live': boolean;
    /**
     *
     * @type {string}
     * @memberof CoursePage
     */
    'length': string;
    /**
     *
     * @type {string}
     * @memberof CoursePage
     */
    'effort': string | null;
    /**
     *
     * @type {string}
     * @memberof CoursePage
     */
    'financial_assistance_form_url': string;
    /**
     *
     * @type {number}
     * @memberof CoursePage
     */
    'current_price': number | null;
    /**
     *
     * @type {Array<any>}
     * @memberof CoursePage
     */
    'instructors': Array<any>;
}
/**
 * Serializer for individual course page items, including all relevant fields.
 * @export
 * @interface CoursePageItem
 */
export interface CoursePageItem {
    /**
     *
     * @type {number}
     * @memberof CoursePageItem
     */
    'id': number;
    /**
     *
     * @type {PageMeta}
     * @memberof CoursePageItem
     */
    'meta': PageMeta;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'length': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'effort': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'min_weekly_hours': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'max_weekly_hours': string;
    /**
     *
     * @type {number}
     * @memberof CoursePageItem
     */
    'min_weeks': number;
    /**
     *
     * @type {number}
     * @memberof CoursePageItem
     */
    'max_weeks': number;
    /**
     *
     * @type {Array<PriceItem>}
     * @memberof CoursePageItem
     */
    'price': Array<PriceItem>;
    /**
     *
     * @type {number}
     * @memberof CoursePageItem
     */
    'min_price': number;
    /**
     *
     * @type {number}
     * @memberof CoursePageItem
     */
    'max_price': number;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'prerequisites': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'faq_url': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'about': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'what_you_learn': string;
    /**
     *
     * @type {FeatureImage}
     * @memberof CoursePageItem
     */
    'feature_image': FeatureImage;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'video_url': string;
    /**
     *
     * @type {string}
     * @memberof CoursePageItem
     */
    'faculty_section_title': string;
    /**
     *
     * @type {Array<Faculty>}
     * @memberof CoursePageItem
     */
    'faculty': Array<Faculty>;
    /**
     *
     * @type {CertificatePage}
     * @memberof CoursePageItem
     */
    'certificate_page': CertificatePage | null;
    /**
     *
     * @type {V2Course}
     * @memberof CoursePageItem
     */
    'course_details': V2Course;
    /**
     *
     * @type {Array<Topic>}
     * @memberof CoursePageItem
     */
    'topic_list': Array<Topic>;
    /**
     *
     * @type {boolean}
     * @memberof CoursePageItem
     */
    'include_in_learn_catalog': boolean;
    /**
     *
     * @type {boolean}
     * @memberof CoursePageItem
     */
    'ingest_content_files_for_ai': boolean;
}
/**
 * Serializer for a list of course pages, including metadata and items.
 * @export
 * @interface CoursePageList
 */
export interface CoursePageList {
    /**
     *
     * @type {PageListMeta}
     * @memberof CoursePageList
     */
    'meta': PageListMeta;
    /**
     *
     * @type {Array<CoursePageItem>}
     * @memberof CoursePageList
     */
    'items': Array<CoursePageItem>;
}
/**
 * Course model serializer
 * @export
 * @interface CourseRequest
 */
export interface CourseRequest {
    /**
     *
     * @type {string}
     * @memberof CourseRequest
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof CourseRequest
     */
    'readable_id': string;
}
/**
 * CourseRunCertificate model serializer
 * @export
 * @interface CourseRunCertificate
 */
export interface CourseRunCertificate {
    /**
     *
     * @type {string}
     * @memberof CourseRunCertificate
     */
    'uuid': string;
    /**
     * Get the link at which this certificate will be served Format: /certificate/<uuid>/ Example: /certificate/93ebd74e-5f88-4b47-bb09-30a6d575328f/
     * @type {string}
     * @memberof CourseRunCertificate
     */
    'link': string;
}
/**
 * CourseRunEnrollment model serializer
 * @export
 * @interface CourseRunEnrollment
 */
export interface CourseRunEnrollment {
    /**
     *
     * @type {V1CourseRunWithCourse}
     * @memberof CourseRunEnrollment
     */
    'run': V1CourseRunWithCourse;
    /**
     *
     * @type {number}
     * @memberof CourseRunEnrollment
     */
    'id': number;
    /**
     *
     * @type {boolean}
     * @memberof CourseRunEnrollment
     */
    'edx_emails_subscription'?: boolean;
    /**
     *
     * @type {CourseRunCertificate}
     * @memberof CourseRunEnrollment
     */
    'certificate': CourseRunCertificate | null;
    /**
     *
     * @type {EnrollmentModeEnum}
     * @memberof CourseRunEnrollment
     */
    'enrollment_mode': EnrollmentModeEnum;
    /**
     *
     * @type {boolean}
     * @memberof CourseRunEnrollment
     */
    'approved_flexible_price_exists': boolean;
    /**
     *
     * @type {Array<CourseRunGrade>}
     * @memberof CourseRunEnrollment
     */
    'grades': Array<CourseRunGrade>;
}
/**
 * CourseRunEnrollment model serializer
 * @export
 * @interface CourseRunEnrollmentRequest
 */
export interface CourseRunEnrollmentRequest {
    /**
     *
     * @type {boolean}
     * @memberof CourseRunEnrollmentRequest
     */
    'edx_emails_subscription'?: boolean;
    /**
     *
     * @type {number}
     * @memberof CourseRunEnrollmentRequest
     */
    'run_id': number;
}
/**
 * CourseRunGrade serializer
 * @export
 * @interface CourseRunGrade
 */
export interface CourseRunGrade {
    /**
     *
     * @type {number}
     * @memberof CourseRunGrade
     */
    'grade': number;
    /**
     *
     * @type {string}
     * @memberof CourseRunGrade
     */
    'letter_grade'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof CourseRunGrade
     */
    'passed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CourseRunGrade
     */
    'set_by_admin'?: boolean;
    /**
     * Returns the grade field value as a number out of 100 (or None if the value is None)
     * @type {number}
     * @memberof CourseRunGrade
     */
    'grade_percent': number;
}
/**
 * Serializer for the result from create_b2b_enrollment.  There\'s always a result, and it should be one of the B2B messages that are defined in main.constants. The other fields appear or not depending on the result type.
 * @export
 * @interface CreateB2BEnrollment
 */
export interface CreateB2BEnrollment {
    /**
     *
     * @type {ResultEnum}
     * @memberof CreateB2BEnrollment
     */
    'result': ResultEnum;
    /**
     *
     * @type {number}
     * @memberof CreateB2BEnrollment
     */
    'order': number;
    /**
     *
     * @type {string}
     * @memberof CreateB2BEnrollment
     */
    'price': string;
    /**
     *
     * @type {GenerateCheckoutPayload}
     * @memberof CreateB2BEnrollment
     */
    'checkout_result'?: GenerateCheckoutPayload;
}
/**
 * Department model serializer
 * @export
 * @interface Department
 */
export interface Department {
    /**
     *
     * @type {string}
     * @memberof Department
     */
    'name': string;
}
/**
 * Department model serializer
 * @export
 * @interface DepartmentRequest
 */
export interface DepartmentRequest {
    /**
     *
     * @type {string}
     * @memberof DepartmentRequest
     */
    'name': string;
}
/**
 * CourseRun model serializer that includes the number of courses and programs associated with each departments
 * @export
 * @interface DepartmentWithCount
 */
export interface DepartmentWithCount {
    /**
     *
     * @type {string}
     * @memberof DepartmentWithCount
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof DepartmentWithCount
     */
    'courses': number;
    /**
     *
     * @type {number}
     * @memberof DepartmentWithCount
     */
    'programs': number;
}
/**
 * Department model serializer that includes the number of courses and programs associated with each
 * @export
 * @interface DepartmentWithCoursesAndPrograms
 */
export interface DepartmentWithCoursesAndPrograms {
    /**
     *
     * @type {number}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'slug': string;
    /**
     *
     * @type {Array<any>}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'course_ids': Array<any>;
    /**
     *
     * @type {Array<any>}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'program_ids': Array<any>;
}
/**
 *
 * @export
 * @interface Discount
 */
export interface Discount {
    /**
     *
     * @type {number}
     * @memberof Discount
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Discount
     */
    'amount': string;
    /**
     *
     * @type {boolean}
     * @memberof Discount
     */
    'automatic'?: boolean;
    /**
     *
     * @type {DiscountTypeEnum}
     * @memberof Discount
     */
    'discount_type': DiscountTypeEnum;
    /**
     *
     * @type {RedemptionTypeEnum}
     * @memberof Discount
     */
    'redemption_type': RedemptionTypeEnum;
    /**
     *
     * @type {number}
     * @memberof Discount
     */
    'max_redemptions'?: number | null;
    /**
     *
     * @type {string}
     * @memberof Discount
     */
    'discount_code': string;
    /**
     *
     * @type {PaymentTypeEnum}
     * @memberof Discount
     */
    'payment_type'?: PaymentTypeEnum | null;
    /**
     * Returns True if the discount has been redeemed
     * @type {boolean}
     * @memberof Discount
     */
    'is_redeemed': boolean;
    /**
     * If set, this discount code will not be redeemable before this date.
     * @type {string}
     * @memberof Discount
     */
    'activation_date'?: string | null;
    /**
     * If set, this discount code will not be redeemable after this date.
     * @type {string}
     * @memberof Discount
     */
    'expiration_date'?: string | null;
}
/**
 * * `percent-off` - percent-off * `dollars-off` - dollars-off * `fixed-price` - fixed-price
 * @export
 * @enum {string}
 */
export declare const DiscountTypeEnum: {
    /**
    * percent-off
    */
    readonly PercentOff: "percent-off";
    /**
    * dollars-off
    */
    readonly DollarsOff: "dollars-off";
    /**
    * fixed-price
    */
    readonly FixedPrice: "fixed-price";
};
export type DiscountTypeEnum = typeof DiscountTypeEnum[keyof typeof DiscountTypeEnum];
/**
 * * `audit` - audit * `verified` - verified
 * @export
 * @enum {string}
 */
export declare const EnrollmentModeEnum: {
    /**
    * audit
    */
    readonly Audit: "audit";
    /**
    * verified
    */
    readonly Verified: "verified";
};
export type EnrollmentModeEnum = typeof EnrollmentModeEnum[keyof typeof EnrollmentModeEnum];
/**
 * Serializer for faculty details used in course pages.
 * @export
 * @interface Faculty
 */
export interface Faculty {
    /**
     *
     * @type {number}
     * @memberof Faculty
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Faculty
     */
    'instructor_name': string;
    /**
     *
     * @type {string}
     * @memberof Faculty
     */
    'instructor_title': string;
    /**
     *
     * @type {string}
     * @memberof Faculty
     */
    'instructor_bio_short': string;
    /**
     *
     * @type {string}
     * @memberof Faculty
     */
    'instructor_bio_long': string;
    /**
     *
     * @type {string}
     * @memberof Faculty
     */
    'feature_image_src': string;
}
/**
 * Serializer for feature images used in course pages.
 * @export
 * @interface FeatureImage
 */
export interface FeatureImage {
    /**
     *
     * @type {string}
     * @memberof FeatureImage
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof FeatureImage
     */
    'image_url': string;
    /**
     *
     * @type {number}
     * @memberof FeatureImage
     */
    'height': number;
    /**
     *
     * @type {number}
     * @memberof FeatureImage
     */
    'width': number;
}
/**
 * * `m` - Male * `f` - Female * `t` - Transgender * `nb` - Non-binary/non-conforming * `o` - Other/Prefer Not to Say
 * @export
 * @enum {string}
 */
export declare const GenderEnum: {
    /**
    * Male
    */
    readonly M: "m";
    /**
    * Female
    */
    readonly F: "f";
    /**
    * Transgender
    */
    readonly T: "t";
    /**
    * Non-binary/non-conforming
    */
    readonly Nb: "nb";
    /**
    * Other/Prefer Not to Say
    */
    readonly O: "o";
};
export type GenderEnum = typeof GenderEnum[keyof typeof GenderEnum];
/**
 * Serializer for the result from ecommerce.api.generate_checkout_payload.  The B2B enrollment API will return the result of the checkout call if the user needs to pay for the cart because of an error creating the checkout payload. In that case, we really just need the error states; it will also include a HttpResponseRedirect that we don\'t really care about for the API\'s purposes.
 * @export
 * @interface GenerateCheckoutPayload
 */
export interface GenerateCheckoutPayload {
    /**
     *
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'country_blocked'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'purchased_same_courserun'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'purchased_non_upgradeable_courserun'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'invalid_discounts'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'no_checkout'?: boolean | null;
}
/**
 * * `None` - ---- * `Doctorate` - Doctorate * `Master\'s or professional degree` - Master\'s or professional degree * `Bachelor\'s degree` - Bachelor\'s degree * `Associate degree` - Associate degree * `Secondary/high school` - Secondary/high school * `Junior secondary/junior high/middle school` - Junior secondary/junior high/middle school * `Elementary/primary school` - Elementary/primary school * `No formal education` - No formal education * `Other education` - Other education
 * @export
 * @enum {string}
 */
export declare const HighestEducationEnum: {
    /**
    * Doctorate
    */
    readonly Doctorate: "Doctorate";
    /**
    * Master&#39;s or professional degree
    */
    readonly MastersOrProfessionalDegree: "Master's or professional degree";
    /**
    * Bachelor&#39;s degree
    */
    readonly BachelorsDegree: "Bachelor's degree";
    /**
    * Associate degree
    */
    readonly AssociateDegree: "Associate degree";
    /**
    * Secondary/high school
    */
    readonly SecondaryHighSchool: "Secondary/high school";
    /**
    * Junior secondary/junior high/middle school
    */
    readonly JuniorSecondaryJuniorHighMiddleSchool: "Junior secondary/junior high/middle school";
    /**
    * Elementary/primary school
    */
    readonly ElementaryPrimarySchool: "Elementary/primary school";
    /**
    * No formal education
    */
    readonly NoFormalEducation: "No formal education";
    /**
    * Other education
    */
    readonly OtherEducation: "Other education";
};
export type HighestEducationEnum = typeof HighestEducationEnum[keyof typeof HighestEducationEnum];
/**
 * * `sso` - SSO * `non-sso` - Non-SSO
 * @export
 * @enum {string}
 */
export declare const IntegrationTypeEnum: {
    /**
    * SSO
    */
    readonly Sso: "sso";
    /**
    * Non-SSO
    */
    readonly NonSso: "non-sso";
};
export type IntegrationTypeEnum = typeof IntegrationTypeEnum[keyof typeof IntegrationTypeEnum];
/**
 *
 * @export
 * @interface LearnerProgramRecordShare
 */
export interface LearnerProgramRecordShare {
    /**
     *
     * @type {string}
     * @memberof LearnerProgramRecordShare
     */
    'share_uuid': string;
    /**
     *
     * @type {string}
     * @memberof LearnerProgramRecordShare
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof LearnerProgramRecordShare
     */
    'updated_on': string;
    /**
     *
     * @type {boolean}
     * @memberof LearnerProgramRecordShare
     */
    'is_active'?: boolean;
    /**
     *
     * @type {number}
     * @memberof LearnerProgramRecordShare
     */
    'user': number;
    /**
     *
     * @type {number}
     * @memberof LearnerProgramRecordShare
     */
    'program': number;
    /**
     *
     * @type {number}
     * @memberof LearnerProgramRecordShare
     */
    'partner_school'?: number | null;
}
/**
 * Gathers the various data needed to display the learner\'s program record. Pass the program you want the record for and attach the learner via context object.
 * @export
 * @interface LearnerRecord
 */
export interface LearnerRecord {
    /**
     * User information including name, email, and username
     * @type {{ [key: string]: string; }}
     * @memberof LearnerRecord
     */
    'user': {
        [key: string]: string;
    };
    /**
     * Program details including title, readable_id, courses, and requirements
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof LearnerRecord
     */
    'program': {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Active program record shares for this user
     * @type {Array<LearnerProgramRecordShare>}
     * @memberof LearnerRecord
     */
    'sharing': Array<LearnerProgramRecordShare>;
    /**
     * List of partner schools
     * @type {Array<PartnerSchool>}
     * @memberof LearnerRecord
     */
    'partner_schools': Array<PartnerSchool>;
}
/**
 * Serializer for legal address
 * @export
 * @interface LegalAddress
 */
export interface LegalAddress {
    /**
     *
     * @type {string}
     * @memberof LegalAddress
     */
    'first_name': string;
    /**
     *
     * @type {string}
     * @memberof LegalAddress
     */
    'last_name': string;
    /**
     *
     * @type {string}
     * @memberof LegalAddress
     */
    'country': string;
    /**
     *
     * @type {string}
     * @memberof LegalAddress
     */
    'state'?: string | null;
}
/**
 * Serializer for legal address
 * @export
 * @interface LegalAddressRequest
 */
export interface LegalAddressRequest {
    /**
     *
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'first_name': string;
    /**
     *
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'last_name': string;
    /**
     *
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'country': string;
    /**
     *
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'state'?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const NullEnum: {};
export type NullEnum = typeof NullEnum[keyof typeof NullEnum];
/**
 * Serializer for the OrganizationPage model.
 * @export
 * @interface OrganizationPage
 */
export interface OrganizationPage {
    /**
     *
     * @type {number}
     * @memberof OrganizationPage
     */
    'id': number;
    /**
     * The name of the organization
     * @type {string}
     * @memberof OrganizationPage
     */
    'name': string;
    /**
     * Any useful extra information about the organization
     * @type {string}
     * @memberof OrganizationPage
     */
    'description': string;
    /**
     * The organization\'s logo. Will be displayed in the app in various places.
     * @type {string}
     * @memberof OrganizationPage
     */
    'logo': string;
    /**
     * The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/
     * @type {string}
     * @memberof OrganizationPage
     */
    'slug': string;
    /**
     *
     * @type {Array<ContractPage>}
     * @memberof OrganizationPage
     */
    'contracts': Array<ContractPage>;
}
/**
 * Serializer for overrides used in certificate pages.
 * @export
 * @interface Override
 */
export interface Override {
    /**
     *
     * @type {string}
     * @memberof Override
     */
    'type': string;
    /**
     *
     * @type {OverrideValue}
     * @memberof Override
     */
    'value': OverrideValue;
    /**
     *
     * @type {string}
     * @memberof Override
     */
    'id': string;
}
/**
 * Serializer for override values used in certificate pages.
 * @export
 * @interface OverrideValue
 */
export interface OverrideValue {
    /**
     *
     * @type {string}
     * @memberof OverrideValue
     */
    'readable_id': string;
    /**
     *
     * @type {string}
     * @memberof OverrideValue
     */
    'CEUs': string;
}
/**
 * Serializer for individual Wagtail pages.
 * @export
 * @interface Page
 */
export interface Page {
    /**
     *
     * @type {number}
     * @memberof Page
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Page
     */
    'title': string;
    /**
     *
     * @type {PageMeta}
     * @memberof Page
     */
    'meta': PageMeta;
}
/**
 * Serializer for a list of Wagtail pages.
 * @export
 * @interface PageList
 */
export interface PageList {
    /**
     *
     * @type {PageListMeta}
     * @memberof PageList
     */
    'meta': PageListMeta;
    /**
     *
     * @type {Array<Page>}
     * @memberof PageList
     */
    'items': Array<Page>;
}
/**
 * Serializer for metadata of a list of Wagtail pages.
 * @export
 * @interface PageListMeta
 */
export interface PageListMeta {
    /**
     *
     * @type {number}
     * @memberof PageListMeta
     */
    'total_count': number;
}
/**
 * Serializer for page metadata used in various Wagtail pages.
 * @export
 * @interface PageMeta
 */
export interface PageMeta {
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'detail_url': string;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'html_url': string;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'slug': string;
    /**
     *
     * @type {boolean}
     * @memberof PageMeta
     */
    'show_in_menus': boolean;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'seo_title': string;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'search_description': string;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'first_published_at': string | null;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'alias_of': string | null;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'locale': string;
    /**
     *
     * @type {boolean}
     * @memberof PageMeta
     */
    'live': boolean;
    /**
     *
     * @type {string}
     * @memberof PageMeta
     */
    'last_published_at': string | null;
}
/**
 * Extends the PageMetaSerializer to work with a Page object
 * @export
 * @interface PageMetaModel
 */
export interface PageMetaModel {
    /**
     * Get the page type, in a more simple manner than Wagtail.  The Wagtail version of this is PageTypeField, and it tries to modify the context, which we neither need nor is in the correct format for it.
     * @type {string}
     * @memberof PageMetaModel
     */
    'type': string;
    /**
     * Get the detail URL, which should be the API call for this page.  The Wagtail version of this is DetailUrlField and it also tries to make changes to the context that we don\'t need.
     * @type {string}
     * @memberof PageMetaModel
     */
    'detail_url': string;
    /**
     * Return PageHtmlUrlField. This is wrapped for OpenAPI schema generation.
     * @type {string}
     * @memberof PageMetaModel
     */
    'html_url': string;
    /**
     *
     * @type {string}
     * @memberof PageMetaModel
     */
    'slug': string;
    /**
     *
     * @type {boolean}
     * @memberof PageMetaModel
     */
    'show_in_menus': boolean;
    /**
     *
     * @type {string}
     * @memberof PageMetaModel
     */
    'seo_title': string;
    /**
     *
     * @type {string}
     * @memberof PageMetaModel
     */
    'search_description': string;
    /**
     *
     * @type {string}
     * @memberof PageMetaModel
     */
    'first_published_at': string | null;
    /**
     *
     * @type {string}
     * @memberof PageMetaModel
     */
    'alias_of': string | null;
    /**
     * Return PageLocaleField. This is wrapped for OpenAPI schema generation.
     * @type {string}
     * @memberof PageMetaModel
     */
    'locale': string;
    /**
     *
     * @type {boolean}
     * @memberof PageMetaModel
     */
    'live': boolean;
    /**
     *
     * @type {string}
     * @memberof PageMetaModel
     */
    'last_published_at': string | null;
}
/**
 * @type PagesRetrieve200Response
 * @export
 */
export type PagesRetrieve200Response = CertificatePage | CoursePageItem | Page | ProgramPageItem;
/**
 *
 * @export
 * @interface PaginatedStaffDashboardUserList
 */
export interface PaginatedStaffDashboardUserList {
    /**
     *
     * @type {number}
     * @memberof PaginatedStaffDashboardUserList
     */
    'count': number;
    /**
     *
     * @type {string}
     * @memberof PaginatedStaffDashboardUserList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedStaffDashboardUserList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<StaffDashboardUser>}
     * @memberof PaginatedStaffDashboardUserList
     */
    'results': Array<StaffDashboardUser>;
}
/**
 *
 * @export
 * @interface PaginatedV1CourseWithCourseRunsList
 */
export interface PaginatedV1CourseWithCourseRunsList {
    /**
     *
     * @type {number}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'count': number;
    /**
     *
     * @type {string}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<V1CourseWithCourseRuns>}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'results': Array<V1CourseWithCourseRuns>;
}
/**
 *
 * @export
 * @interface PaginatedV1ProgramList
 */
export interface PaginatedV1ProgramList {
    /**
     *
     * @type {number}
     * @memberof PaginatedV1ProgramList
     */
    'count': number;
    /**
     *
     * @type {string}
     * @memberof PaginatedV1ProgramList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedV1ProgramList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<V1Program>}
     * @memberof PaginatedV1ProgramList
     */
    'results': Array<V1Program>;
}
/**
 *
 * @export
 * @interface PaginatedV2CourseWithCourseRunsList
 */
export interface PaginatedV2CourseWithCourseRunsList {
    /**
     *
     * @type {number}
     * @memberof PaginatedV2CourseWithCourseRunsList
     */
    'count': number;
    /**
     *
     * @type {string}
     * @memberof PaginatedV2CourseWithCourseRunsList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedV2CourseWithCourseRunsList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<V2CourseWithCourseRuns>}
     * @memberof PaginatedV2CourseWithCourseRunsList
     */
    'results': Array<V2CourseWithCourseRuns>;
}
/**
 *
 * @export
 * @interface PaginatedV2ProgramCollectionList
 */
export interface PaginatedV2ProgramCollectionList {
    /**
     *
     * @type {number}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'count': number;
    /**
     *
     * @type {string}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<V2ProgramCollection>}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'results': Array<V2ProgramCollection>;
}
/**
 *
 * @export
 * @interface PaginatedV2ProgramList
 */
export interface PaginatedV2ProgramList {
    /**
     *
     * @type {number}
     * @memberof PaginatedV2ProgramList
     */
    'count': number;
    /**
     *
     * @type {string}
     * @memberof PaginatedV2ProgramList
     */
    'next'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PaginatedV2ProgramList
     */
    'previous'?: string | null;
    /**
     *
     * @type {Array<V2Program>}
     * @memberof PaginatedV2ProgramList
     */
    'results': Array<V2Program>;
}
/**
 *
 * @export
 * @interface PartnerSchool
 */
export interface PartnerSchool {
    /**
     *
     * @type {number}
     * @memberof PartnerSchool
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PartnerSchool
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof PartnerSchool
     */
    'updated_on': string;
    /**
     *
     * @type {string}
     * @memberof PartnerSchool
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PartnerSchool
     */
    'email': string;
}
/**
 *
 * @export
 * @interface PartnerSchoolRequest
 */
export interface PartnerSchoolRequest {
    /**
     *
     * @type {string}
     * @memberof PartnerSchoolRequest
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PartnerSchoolRequest
     */
    'email': string;
}
/**
 * Serializer for confirming a user email change
 * @export
 * @interface PatchedChangeEmailRequestUpdateRequest
 */
export interface PatchedChangeEmailRequestUpdateRequest {
    /**
     *
     * @type {boolean}
     * @memberof PatchedChangeEmailRequestUpdateRequest
     */
    'confirmed'?: boolean;
}
/**
 *
 * @export
 * @interface PatchedUpdateCourseRunEnrollmentRequest
 */
export interface PatchedUpdateCourseRunEnrollmentRequest {
    /**
     * Whether to receive course emails
     * @type {boolean}
     * @memberof PatchedUpdateCourseRunEnrollmentRequest
     */
    'receive_emails'?: boolean;
}
/**
 * Serializer for users
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
    /**
     *
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'username'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'password'?: string;
    /**
     *
     * @type {LegalAddressRequest}
     * @memberof PatchedUserRequest
     */
    'legal_address'?: LegalAddressRequest | null;
    /**
     *
     * @type {UserProfileRequest}
     * @memberof PatchedUserRequest
     */
    'user_profile'?: UserProfileRequest | null;
    /**
     *
     * @type {boolean}
     * @memberof PatchedUserRequest
     */
    'is_active'?: boolean;
}
/**
 * * `marketing` - marketing * `sales` - sales * `financial-assistance` - financial-assistance * `customer-support` - customer-support * `staff` - staff * `legacy` - legacy
 * @export
 * @enum {string}
 */
export declare const PaymentTypeEnum: {
    /**
    * marketing
    */
    readonly Marketing: "marketing";
    /**
    * sales
    */
    readonly Sales: "sales";
    /**
    * financial-assistance
    */
    readonly FinancialAssistance: "financial-assistance";
    /**
    * customer-support
    */
    readonly CustomerSupport: "customer-support";
    /**
    * staff
    */
    readonly Staff: "staff";
    /**
    * legacy
    */
    readonly Legacy: "legacy";
};
export type PaymentTypeEnum = typeof PaymentTypeEnum[keyof typeof PaymentTypeEnum];
/**
 * Serializer for price items used in course pages.
 * @export
 * @interface PriceItem
 */
export interface PriceItem {
    /**
     *
     * @type {string}
     * @memberof PriceItem
     */
    'type': string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof PriceItem
     */
    'value': {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof PriceItem
     */
    'id': string;
}
/**
 * Simple serializer for Product without related purchasable objects
 * @export
 * @interface ProductFlexibilePrice
 */
export interface ProductFlexibilePrice {
    /**
     *
     * @type {number}
     * @memberof ProductFlexibilePrice
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof ProductFlexibilePrice
     */
    'price': string;
    /**
     *
     * @type {string}
     * @memberof ProductFlexibilePrice
     */
    'description': string;
    /**
     * Controls visibility of the product in the app.
     * @type {boolean}
     * @memberof ProductFlexibilePrice
     */
    'is_active'?: boolean;
    /**
     *
     * @type {Discount}
     * @memberof ProductFlexibilePrice
     */
    'product_flexible_price': Discount | null;
}
/**
 * Simple serializer for Product without related purchasable objects
 * @export
 * @interface ProductFlexibilePriceRequest
 */
export interface ProductFlexibilePriceRequest {
    /**
     *
     * @type {string}
     * @memberof ProductFlexibilePriceRequest
     */
    'price': string;
    /**
     *
     * @type {string}
     * @memberof ProductFlexibilePriceRequest
     */
    'description': string;
    /**
     * Controls visibility of the product in the app.
     * @type {boolean}
     * @memberof ProductFlexibilePriceRequest
     */
    'is_active'?: boolean;
}
/**
 *
 * @export
 * @interface Program
 */
export interface Program {
    /**
     *
     * @type {number}
     * @memberof Program
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Program
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Program
     */
    'readable_id': string;
}
/**
 * ProgramCertificate model serializer
 * @export
 * @interface ProgramCertificate
 */
export interface ProgramCertificate {
    /**
     *
     * @type {string}
     * @memberof ProgramCertificate
     */
    'uuid': string;
    /**
     * Get the link at which this certificate will be served Format: /certificate/program/<uuid>/ Example: /certificate/program/93ebd74e-5f88-4b47-bb09-30a6d575328f/
     * @type {string}
     * @memberof ProgramCertificate
     */
    'link': string;
}
/**
 * Program page model serializer
 * @export
 * @interface ProgramPage
 */
export interface ProgramPage {
    /**
     * Serializes the source of the feature_image
     * @type {string}
     * @memberof ProgramPage
     */
    'feature_image_src': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPage
     */
    'page_url': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPage
     */
    'financial_assistance_form_url': string;
    /**
     * The description shown on the home page and product page.
     * @type {string}
     * @memberof ProgramPage
     */
    'description': string;
    /**
     *
     * @type {boolean}
     * @memberof ProgramPage
     */
    'live': boolean;
    /**
     * A short description indicating how long it takes to complete (e.g. \'4 weeks\').
     * @type {string}
     * @memberof ProgramPage
     */
    'length'?: string;
    /**
     * A short description indicating how much effort is required (e.g. 1-3 hours per week).
     * @type {string}
     * @memberof ProgramPage
     */
    'effort'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProgramPage
     */
    'price': string;
}
/**
 * Serializer for individual program page items, including all relevant fields.
 * @export
 * @interface ProgramPageItem
 */
export interface ProgramPageItem {
    /**
     *
     * @type {number}
     * @memberof ProgramPageItem
     */
    'id': number;
    /**
     *
     * @type {PageMeta}
     * @memberof ProgramPageItem
     */
    'meta': PageMeta;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'length': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'effort': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'min_weekly_hours': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'max_weekly_hours': string;
    /**
     *
     * @type {number}
     * @memberof ProgramPageItem
     */
    'min_weeks': number;
    /**
     *
     * @type {number}
     * @memberof ProgramPageItem
     */
    'max_weeks': number;
    /**
     *
     * @type {Array<PriceItem>}
     * @memberof ProgramPageItem
     */
    'price': Array<PriceItem>;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'min_price': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'max_price': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'prerequisites': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'faq_url': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'about': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'what_you_learn': string;
    /**
     *
     * @type {FeatureImage}
     * @memberof ProgramPageItem
     */
    'feature_image': FeatureImage;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'video_url': string;
    /**
     *
     * @type {string}
     * @memberof ProgramPageItem
     */
    'faculty_section_title': string;
    /**
     *
     * @type {Array<Faculty>}
     * @memberof ProgramPageItem
     */
    'faculty': Array<Faculty>;
    /**
     *
     * @type {CertificatePage}
     * @memberof ProgramPageItem
     */
    'certificate_page': CertificatePage;
    /**
     *
     * @type {V2Program}
     * @memberof ProgramPageItem
     */
    'program_details': V2Program;
}
/**
 * Serializer for a list of program pages, including metadata and items.
 * @export
 * @interface ProgramPageList
 */
export interface ProgramPageList {
    /**
     *
     * @type {PageListMeta}
     * @memberof ProgramPageList
     */
    'meta': PageListMeta;
    /**
     *
     * @type {Array<ProgramPageItem>}
     * @memberof ProgramPageList
     */
    'items': Array<ProgramPageItem>;
}
/**
 * Serializer for public user data
 * @export
 * @interface PublicUser
 */
export interface PublicUser {
    /**
     *
     * @type {number}
     * @memberof PublicUser
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    'updated_on': string;
}
/**
 * * `one-time` - one-time * `one-time-per-user` - one-time-per-user * `unlimited` - unlimited
 * @export
 * @enum {string}
 */
export declare const RedemptionTypeEnum: {
    /**
    * one-time
    */
    readonly OneTime: "one-time";
    /**
    * one-time-per-user
    */
    readonly OneTimePerUser: "one-time-per-user";
    /**
    * unlimited
    */
    readonly Unlimited: "unlimited";
};
export type RedemptionTypeEnum = typeof RedemptionTypeEnum[keyof typeof RedemptionTypeEnum];
/**
 * * `b2b-disallowed` - b2b-disallowed * `b2b-error-no-contract` - b2b-error-no-contract * `b2b-error-no-product` - b2b-error-no-product * `b2b-error-missing-enrollment-code` - b2b-error-missing-enrollment-code * `b2b-error-invalid-enrollment-code` - b2b-error-invalid-enrollment-code * `b2b-error-requires-checkout` - b2b-error-requires-checkout * `b2b-enroll-success` - b2b-enroll-success
 * @export
 * @enum {string}
 */
export declare const ResultEnum: {
    /**
    * b2b-disallowed
    */
    readonly Disallowed: "b2b-disallowed";
    /**
    * b2b-error-no-contract
    */
    readonly ErrorNoContract: "b2b-error-no-contract";
    /**
    * b2b-error-no-product
    */
    readonly ErrorNoProduct: "b2b-error-no-product";
    /**
    * b2b-error-missing-enrollment-code
    */
    readonly ErrorMissingEnrollmentCode: "b2b-error-missing-enrollment-code";
    /**
    * b2b-error-invalid-enrollment-code
    */
    readonly ErrorInvalidEnrollmentCode: "b2b-error-invalid-enrollment-code";
    /**
    * b2b-error-requires-checkout
    */
    readonly ErrorRequiresCheckout: "b2b-error-requires-checkout";
    /**
    * b2b-enroll-success
    */
    readonly EnrollSuccess: "b2b-enroll-success";
};
export type ResultEnum = typeof ResultEnum[keyof typeof ResultEnum];
/**
 * Serializer for signatory items used in certificate pages.
 * @export
 * @interface SignatoryItem
 */
export interface SignatoryItem {
    /**
     *
     * @type {string}
     * @memberof SignatoryItem
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof SignatoryItem
     */
    'title_1': string;
    /**
     *
     * @type {string}
     * @memberof SignatoryItem
     */
    'title_2': string;
    /**
     *
     * @type {string}
     * @memberof SignatoryItem
     */
    'organization': string;
    /**
     *
     * @type {string}
     * @memberof SignatoryItem
     */
    'signature_image': string;
}
/**
 * Serializer for data we care about in the staff dashboard
 * @export
 * @interface StaffDashboardUser
 */
export interface StaffDashboardUser {
    /**
     *
     * @type {number}
     * @memberof StaffDashboardUser
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof StaffDashboardUser
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof StaffDashboardUser
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof StaffDashboardUser
     */
    'email': string;
    /**
     *
     * @type {LegalAddress}
     * @memberof StaffDashboardUser
     */
    'legal_address': LegalAddress | null;
    /**
     * The user can access the admin site
     * @type {boolean}
     * @memberof StaffDashboardUser
     */
    'is_staff'?: boolean;
    /**
     * Designates that this user has all permissions without explicitly assigning them.
     * @type {boolean}
     * @memberof StaffDashboardUser
     */
    'is_superuser'?: boolean;
}
/**
 * Serializer for topics used in course pages.
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Topic
     */
    'parent'?: string;
}
/**
 * Serializer for users
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'username'?: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     *
     * @type {LegalAddress}
     * @memberof User
     */
    'legal_address': LegalAddress | null;
    /**
     *
     * @type {UserProfile}
     * @memberof User
     */
    'user_profile'?: UserProfile | null;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'is_anonymous': boolean;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'is_authenticated': boolean;
    /**
     * Returns True if the user has editor permissions for the CMS
     * @type {boolean}
     * @memberof User
     */
    'is_editor': boolean;
    /**
     * The user can access the admin site
     * @type {boolean}
     * @memberof User
     */
    'is_staff': boolean;
    /**
     * Designates that this user has all permissions without explicitly assigning them.
     * @type {boolean}
     * @memberof User
     */
    'is_superuser': boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'updated_on': string;
    /**
     *
     * @type {Array<string>}
     * @memberof User
     */
    'grants': Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'is_active'?: boolean;
    /**
     *
     * @type {Array<UserOrganization>}
     * @memberof User
     */
    'b2b_organizations': Array<UserOrganization>;
}
/**
 * Serializer for user organization data.  Slightly different from the OrganizationPageSerializer; we only need the user\'s orgs and contracts.
 * @export
 * @interface UserOrganization
 */
export interface UserOrganization {
    /**
     *
     * @type {number}
     * @memberof UserOrganization
     */
    'id': number;
    /**
     * The name of the organization
     * @type {string}
     * @memberof UserOrganization
     */
    'name': string;
    /**
     * Any useful extra information about the organization
     * @type {string}
     * @memberof UserOrganization
     */
    'description': string;
    /**
     * The organization\'s logo. Will be displayed in the app in various places.
     * @type {string}
     * @memberof UserOrganization
     */
    'logo': string;
    /**
     * The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/
     * @type {string}
     * @memberof UserOrganization
     */
    'slug': string;
    /**
     *
     * @type {Array<ContractPage>}
     * @memberof UserOrganization
     */
    'contracts': Array<ContractPage>;
}
/**
 * Serializer for profile
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     *
     * @type {UserProfileGender}
     * @memberof UserProfile
     */
    'gender'?: UserProfileGender | null;
    /**
     *
     * @type {number}
     * @memberof UserProfile
     */
    'year_of_birth'?: number | null;
    /**
     * Flags if we\'ve asked the user for additional information
     * @type {boolean}
     * @memberof UserProfile
     */
    'addl_field_flag'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserProfile
     */
    'company'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserProfile
     */
    'job_title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserProfile
     */
    'industry'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserProfile
     */
    'job_function'?: string | null;
    /**
     *
     * @type {CompanySizeEnum}
     * @memberof UserProfile
     */
    'company_size'?: CompanySizeEnum | null;
    /**
     *
     * @type {YearsExperienceEnum}
     * @memberof UserProfile
     */
    'years_experience'?: YearsExperienceEnum | null;
    /**
     *
     * @type {string}
     * @memberof UserProfile
     */
    'leadership_level'?: string | null;
    /**
     *
     * @type {UserProfileHighestEducation}
     * @memberof UserProfile
     */
    'highest_education'?: UserProfileHighestEducation | null;
    /**
     * The learner identifies as type Student
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_student'?: boolean | null;
    /**
     * The learner identifies as type Professional
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_professional'?: boolean | null;
    /**
     * The learner identifies as type Educator
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_educator'?: boolean | null;
    /**
     * The learner identifies as type Other (not professional, student, or educator)
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_other'?: boolean | null;
}
/**
 * @type UserProfileGender
 * @export
 */
export type UserProfileGender = BlankEnum | GenderEnum;
/**
 * @type UserProfileHighestEducation
 * @export
 */
export type UserProfileHighestEducation = BlankEnum | HighestEducationEnum;
/**
 * Serializer for profile
 * @export
 * @interface UserProfileRequest
 */
export interface UserProfileRequest {
    /**
     *
     * @type {UserProfileGender}
     * @memberof UserProfileRequest
     */
    'gender'?: UserProfileGender | null;
    /**
     *
     * @type {number}
     * @memberof UserProfileRequest
     */
    'year_of_birth'?: number | null;
    /**
     * Flags if we\'ve asked the user for additional information
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'addl_field_flag'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserProfileRequest
     */
    'company'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserProfileRequest
     */
    'job_title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserProfileRequest
     */
    'industry'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserProfileRequest
     */
    'job_function'?: string | null;
    /**
     *
     * @type {CompanySizeEnum}
     * @memberof UserProfileRequest
     */
    'company_size'?: CompanySizeEnum | null;
    /**
     *
     * @type {YearsExperienceEnum}
     * @memberof UserProfileRequest
     */
    'years_experience'?: YearsExperienceEnum | null;
    /**
     *
     * @type {string}
     * @memberof UserProfileRequest
     */
    'leadership_level'?: string | null;
    /**
     *
     * @type {UserProfileHighestEducation}
     * @memberof UserProfileRequest
     */
    'highest_education'?: UserProfileHighestEducation | null;
    /**
     * The learner identifies as type Student
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_student'?: boolean | null;
    /**
     * The learner identifies as type Professional
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_professional'?: boolean | null;
    /**
     * The learner identifies as type Educator
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_educator'?: boolean | null;
    /**
     * The learner identifies as type Other (not professional, student, or educator)
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_other'?: boolean | null;
}
/**
 *
 * @export
 * @interface UserProgramEnrollmentDetail
 */
export interface UserProgramEnrollmentDetail {
    /**
     *
     * @type {V1Program}
     * @memberof UserProgramEnrollmentDetail
     */
    'program': V1Program;
    /**
     *
     * @type {Array<CourseRunEnrollment>}
     * @memberof UserProgramEnrollmentDetail
     */
    'enrollments': Array<CourseRunEnrollment>;
    /**
     *
     * @type {ProgramCertificate}
     * @memberof UserProgramEnrollmentDetail
     */
    'certificate': ProgramCertificate | null;
}
/**
 * CourseRun model serializer
 * @export
 * @interface V1BaseCourseRun
 */
export interface V1BaseCourseRun {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'expiration_date'?: string | null;
    /**
     * Get the courseware URL
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'courseware_url': string | null;
    /**
     *
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'upgrade_deadline'?: string | null;
    /**
     * Check if the course run is upgradable
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_upgradable': boolean;
    /**
     * Check if the course run is enrollable
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_enrollable': boolean;
    /**
     * Check if the course run is archived
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_archived': boolean;
    /**
     *
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'run_tag': string;
    /**
     *
     * @type {number}
     * @memberof V1BaseCourseRun
     */
    'id': number;
    /**
     *
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'live'?: boolean;
    /**
     * Get the course number
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'course_number': string;
    /**
     *
     * @type {Array<ProductFlexibilePrice>}
     * @memberof V1BaseCourseRun
     */
    'products': Array<ProductFlexibilePrice>;
    /**
     *
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'approved_flexible_price_exists': boolean;
}
/**
 * CourseRun model serializer - also serializes the parent Course.
 * @export
 * @interface V1CourseRunWithCourse
 */
export interface V1CourseRunWithCourse {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'expiration_date'?: string | null;
    /**
     * Get the courseware URL
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'courseware_url': string | null;
    /**
     *
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'upgrade_deadline'?: string | null;
    /**
     * Check if the course run is upgradable
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_upgradable': boolean;
    /**
     * Check if the course run is enrollable
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_enrollable': boolean;
    /**
     * Check if the course run is archived
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_archived': boolean;
    /**
     *
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'run_tag': string;
    /**
     *
     * @type {number}
     * @memberof V1CourseRunWithCourse
     */
    'id': number;
    /**
     *
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'live'?: boolean;
    /**
     * Get the course number
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'course_number': string;
    /**
     * List of products associated with this course run
     * @type {Array<ProductFlexibilePrice>}
     * @memberof V1CourseRunWithCourse
     */
    'products': Array<ProductFlexibilePrice>;
    /**
     *
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'approved_flexible_price_exists': boolean;
    /**
     *
     * @type {Course}
     * @memberof V1CourseRunWithCourse
     */
    'course': Course;
}
/**
 * CourseRun model serializer - also serializes the parent Course.
 * @export
 * @interface V1CourseRunWithCourseRequest
 */
export interface V1CourseRunWithCourseRequest {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'expiration_date'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'upgrade_deadline'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof V1CourseRunWithCourseRequest
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'run_tag': string;
    /**
     *
     * @type {boolean}
     * @memberof V1CourseRunWithCourseRequest
     */
    'live'?: boolean;
}
/**
 * Course model serializer - also serializes child course runs
 * @export
 * @interface V1CourseWithCourseRuns
 */
export interface V1CourseWithCourseRuns {
    /**
     *
     * @type {number}
     * @memberof V1CourseWithCourseRuns
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof V1CourseWithCourseRuns
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof V1CourseWithCourseRuns
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof V1CourseWithCourseRuns
     */
    'next_run_id': number | null;
    /**
     *
     * @type {Array<Department>}
     * @memberof V1CourseWithCourseRuns
     */
    'departments': Array<Department>;
    /**
     *
     * @type {CoursePage}
     * @memberof V1CourseWithCourseRuns
     */
    'page': CoursePage;
    /**
     *
     * @type {Program}
     * @memberof V1CourseWithCourseRuns
     */
    'programs': Program | null;
    /**
     *
     * @type {Array<V1BaseCourseRun>}
     * @memberof V1CourseWithCourseRuns
     */
    'courseruns': Array<V1BaseCourseRun>;
}
/**
 * Program model serializer
 * @export
 * @interface V1Program
 */
export interface V1Program {
    /**
     *
     * @type {string}
     * @memberof V1Program
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof V1Program
     */
    'readable_id': string;
    /**
     *
     * @type {number}
     * @memberof V1Program
     */
    'id': number;
    /**
     *
     * @type {V1CourseWithCourseRuns}
     * @memberof V1Program
     */
    'courses': V1CourseWithCourseRuns;
    /**
     *
     * @type {V1ProgramRequirements}
     * @memberof V1Program
     */
    'requirements': V1ProgramRequirements;
    /**
     *
     * @type {Array<V1ProgramRequirement>}
     * @memberof V1Program
     */
    'req_tree': Array<V1ProgramRequirement>;
    /**
     *
     * @type {ProgramPage}
     * @memberof V1Program
     */
    'page': ProgramPage;
    /**
     *
     * @type {string}
     * @memberof V1Program
     */
    'program_type'?: string | null;
    /**
     *
     * @type {Array<Department>}
     * @memberof V1Program
     */
    'departments': Array<Department>;
    /**
     *
     * @type {boolean}
     * @memberof V1Program
     */
    'live'?: boolean;
}
/**
 * Serializer for a ProgramRequirement
 * @export
 * @interface V1ProgramRequirement
 */
export interface V1ProgramRequirement {
    /**
     *
     * @type {number}
     * @memberof V1ProgramRequirement
     */
    'id'?: number | null;
    /**
     *
     * @type {V1ProgramRequirementData}
     * @memberof V1ProgramRequirement
     */
    'data': V1ProgramRequirementData;
    /**
     *
     * @type {Array<V1ProgramRequirement>}
     * @memberof V1ProgramRequirement
     */
    'children'?: Array<V1ProgramRequirement>;
}
/**
 * Serializer for ProgramRequirement data
 * @export
 * @interface V1ProgramRequirementData
 */
export interface V1ProgramRequirementData {
    /**
     *
     * @type {V1ProgramRequirementDataNodeTypeEnum}
     * @memberof V1ProgramRequirementData
     */
    'node_type': V1ProgramRequirementDataNodeTypeEnum;
    /**
     *
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'course'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'required_program'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'program'?: string;
    /**
     *
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'operator'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'operator_value'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof V1ProgramRequirementData
     */
    'elective_flag'?: boolean | null;
}
/**
 * * `operator` - operator * `course` - course * `program` - program
 * @export
 * @enum {string}
 */
export declare const V1ProgramRequirementDataNodeTypeEnum: {
    /**
    * operator
    */
    readonly Operator: "operator";
    /**
    * course
    */
    readonly Course: "course";
    /**
    * program
    */
    readonly Program: "program";
};
export type V1ProgramRequirementDataNodeTypeEnum = typeof V1ProgramRequirementDataNodeTypeEnum[keyof typeof V1ProgramRequirementDataNodeTypeEnum];
/**
 *
 * @export
 * @interface V1ProgramRequirements
 */
export interface V1ProgramRequirements {
    /**
     * List of required course IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V1ProgramRequirements
     */
    'required'?: Array<V1ProgramRequirementsRequiredInner>;
    /**
     * List of elective course IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V1ProgramRequirements
     */
    'electives'?: Array<V1ProgramRequirementsRequiredInner>;
}
/**
 * @type V1ProgramRequirementsRequiredInner
 * @export
 */
export type V1ProgramRequirementsRequiredInner = number;
/**
 * Course model serializer
 * @export
 * @interface V2Course
 */
export interface V2Course {
    /**
     *
     * @type {number}
     * @memberof V2Course
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof V2Course
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof V2Course
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof V2Course
     */
    'next_run_id': number | null;
    /**
     *
     * @type {Array<Department>}
     * @memberof V2Course
     */
    'departments': Array<Department>;
    /**
     *
     * @type {CoursePage}
     * @memberof V2Course
     */
    'page': CoursePage;
    /**
     *
     * @type {Array<{ [key: string]: any; }>}
     * @memberof V2Course
     */
    'programs': Array<{
        [key: string]: any;
    }> | null;
    /**
     * List topics of a course
     * @type {Array<{ [key: string]: any; }>}
     * @memberof V2Course
     */
    'topics': Array<{
        [key: string]: any;
    }>;
    /**
     *
     * @type {string}
     * @memberof V2Course
     */
    'certificate_type': string;
    /**
     * Check if the prerequisites field is populated in the course page CMS. Returns:     bool: True when the prerequisites field is populated in the course page CMS.  False otherwise.
     * @type {boolean}
     * @memberof V2Course
     */
    'required_prerequisites': boolean;
    /**
     * Get the duration of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'duration': string;
    /**
     * Get the min weeks of the course from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'min_weeks': number | null;
    /**
     * Get the max weeks of the course from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'max_weeks': number | null;
    /**
     * Get the min price of the product from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'min_price': number | null;
    /**
     * Get the max price of the product from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'max_price': number | null;
    /**
     * Get the time commitment of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'time_commitment': string | null;
    /**
     * Get course availability
     * @type {string}
     * @memberof V2Course
     */
    'availability': string;
    /**
     * Get the min weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'min_weekly_hours': string | null;
    /**
     * Get the max weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'max_weekly_hours': string | null;
    /**
     *
     * @type {boolean}
     * @memberof V2Course
     */
    'include_in_learn_catalog': boolean;
    /**
     *
     * @type {boolean}
     * @memberof V2Course
     */
    'ingest_content_files_for_ai': boolean;
}
/**
 * CourseRun model serializer
 * @export
 * @interface V2CourseRun
 */
export interface V2CourseRun {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRun
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRun
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRun
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRun
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRun
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V2CourseRun
     */
    'expiration_date'?: string | null;
    /**
     * Get the courseware URL
     * @type {string}
     * @memberof V2CourseRun
     */
    'courseware_url': string | null;
    /**
     *
     * @type {string}
     * @memberof V2CourseRun
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRun
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V2CourseRun
     */
    'upgrade_deadline'?: string | null;
    /**
     * Check if the course run is upgradable
     * @type {boolean}
     * @memberof V2CourseRun
     */
    'is_upgradable': boolean;
    /**
     * Check if the course run is enrollable
     * @type {boolean}
     * @memberof V2CourseRun
     */
    'is_enrollable': boolean;
    /**
     * Check if the course run is archived
     * @type {boolean}
     * @memberof V2CourseRun
     */
    'is_archived': boolean;
    /**
     *
     * @type {boolean}
     * @memberof V2CourseRun
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V2CourseRun
     */
    'run_tag': string;
    /**
     *
     * @type {number}
     * @memberof V2CourseRun
     */
    'id': number;
    /**
     *
     * @type {boolean}
     * @memberof V2CourseRun
     */
    'live'?: boolean;
    /**
     * Get the course number
     * @type {string}
     * @memberof V2CourseRun
     */
    'course_number': string;
    /**
     *
     * @type {Array<ProductFlexibilePrice>}
     * @memberof V2CourseRun
     */
    'products': Array<ProductFlexibilePrice>;
    /**
     *
     * @type {boolean}
     * @memberof V2CourseRun
     */
    'approved_flexible_price_exists': boolean;
    /**
     *
     * @type {number}
     * @memberof V2CourseRun
     */
    'b2b_contract'?: number | null;
}
/**
 * Serializer for course certificates.
 * @export
 * @interface V2CourseRunCertificate
 */
export interface V2CourseRunCertificate {
    /**
     *
     * @type {PublicUser}
     * @memberof V2CourseRunCertificate
     */
    'user': PublicUser;
    /**
     *
     * @type {string}
     * @memberof V2CourseRunCertificate
     */
    'uuid': string;
    /**
     * Indicates whether or not the certificate is revoked
     * @type {boolean}
     * @memberof V2CourseRunCertificate
     */
    'is_revoked': boolean;
    /**
     *
     * @type {CertificatePageModel}
     * @memberof V2CourseRunCertificate
     */
    'certificate_page': CertificatePageModel;
    /**
     *
     * @type {number}
     * @memberof V2CourseRunCertificate
     */
    'course_run': number;
    /**
     *
     * @type {number}
     * @memberof V2CourseRunCertificate
     */
    'certificate_page_revision': number | null;
}
/**
 * Course model serializer - also serializes child course runs
 * @export
 * @interface V2CourseWithCourseRuns
 */
export interface V2CourseWithCourseRuns {
    /**
     *
     * @type {number}
     * @memberof V2CourseWithCourseRuns
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof V2CourseWithCourseRuns
     */
    'next_run_id': number | null;
    /**
     *
     * @type {Array<Department>}
     * @memberof V2CourseWithCourseRuns
     */
    'departments': Array<Department>;
    /**
     *
     * @type {CoursePage}
     * @memberof V2CourseWithCourseRuns
     */
    'page': CoursePage;
    /**
     *
     * @type {Array<{ [key: string]: any; }>}
     * @memberof V2CourseWithCourseRuns
     */
    'programs': Array<{
        [key: string]: any;
    }> | null;
    /**
     * List topics of a course
     * @type {Array<{ [key: string]: any; }>}
     * @memberof V2CourseWithCourseRuns
     */
    'topics': Array<{
        [key: string]: any;
    }>;
    /**
     *
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'certificate_type': string;
    /**
     * Check if the prerequisites field is populated in the course page CMS. Returns:     bool: True when the prerequisites field is populated in the course page CMS.  False otherwise.
     * @type {boolean}
     * @memberof V2CourseWithCourseRuns
     */
    'required_prerequisites': boolean;
    /**
     * Get the duration of the course from the course page CMS.
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'duration': string;
    /**
     * Get the min weeks of the course from the CMS page.
     * @type {number}
     * @memberof V2CourseWithCourseRuns
     */
    'min_weeks': number | null;
    /**
     * Get the max weeks of the course from the CMS page.
     * @type {number}
     * @memberof V2CourseWithCourseRuns
     */
    'max_weeks': number | null;
    /**
     * Get the min price of the product from the CMS page.
     * @type {number}
     * @memberof V2CourseWithCourseRuns
     */
    'min_price': number | null;
    /**
     * Get the max price of the product from the CMS page.
     * @type {number}
     * @memberof V2CourseWithCourseRuns
     */
    'max_price': number | null;
    /**
     * Get the time commitment of the course from the course page CMS.
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'time_commitment': string | null;
    /**
     * Get course availability
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'availability': string;
    /**
     * Get the min weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'min_weekly_hours': string | null;
    /**
     * Get the max weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2CourseWithCourseRuns
     */
    'max_weekly_hours': string | null;
    /**
     *
     * @type {boolean}
     * @memberof V2CourseWithCourseRuns
     */
    'include_in_learn_catalog': boolean;
    /**
     *
     * @type {boolean}
     * @memberof V2CourseWithCourseRuns
     */
    'ingest_content_files_for_ai': boolean;
    /**
     *
     * @type {Array<V2CourseRun>}
     * @memberof V2CourseWithCourseRuns
     */
    'courseruns': Array<V2CourseRun>;
}
/**
 * Program Model Serializer v2
 * @export
 * @interface V2Program
 */
export interface V2Program {
    /**
     *
     * @type {string}
     * @memberof V2Program
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof V2Program
     */
    'readable_id': string;
    /**
     *
     * @type {number}
     * @memberof V2Program
     */
    'id': number;
    /**
     *
     * @type {Array<number>}
     * @memberof V2Program
     */
    'courses': Array<number>;
    /**
     *
     * @type {Array<number>}
     * @memberof V2Program
     */
    'collections': Array<number>;
    /**
     *
     * @type {V2ProgramRequirements}
     * @memberof V2Program
     */
    'requirements': V2ProgramRequirements;
    /**
     *
     * @type {Array<V2ProgramRequirement>}
     * @memberof V2Program
     */
    'req_tree': Array<V2ProgramRequirement>;
    /**
     *
     * @type {ProgramPage}
     * @memberof V2Program
     */
    'page': ProgramPage;
    /**
     *
     * @type {string}
     * @memberof V2Program
     */
    'program_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V2Program
     */
    'certificate_type': string;
    /**
     *
     * @type {Array<Department>}
     * @memberof V2Program
     */
    'departments': Array<Department>;
    /**
     *
     * @type {boolean}
     * @memberof V2Program
     */
    'live'?: boolean;
    /**
     *
     * @type {Array<V2ProgramTopicsInner>}
     * @memberof V2Program
     */
    'topics': Array<V2ProgramTopicsInner>;
    /**
     *
     * @type {AvailabilityEnum}
     * @memberof V2Program
     */
    'availability'?: AvailabilityEnum;
    /**
     * Get the start date of the program by finding the first available run.
     * @type {string}
     * @memberof V2Program
     */
    'start_date': string | null;
    /**
     *
     * @type {string}
     * @memberof V2Program
     */
    'end_date'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V2Program
     */
    'enrollment_start'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V2Program
     */
    'enrollment_end'?: string | null;
    /**
     * Check if the prerequisites field is populated in the program page CMS.
     * @type {boolean}
     * @memberof V2Program
     */
    'required_prerequisites': boolean;
    /**
     * Get the length/duration field from the program page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'duration': string | null;
    /**
     * Get the min weeks of the program from the CMS page.
     * @type {number}
     * @memberof V2Program
     */
    'min_weeks': number | null;
    /**
     * Get the max weeks of the program from the CMS page.
     * @type {number}
     * @memberof V2Program
     */
    'max_weeks': number | null;
    /**
     * Get the effort/time_commitment field from the program page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'time_commitment': string | null;
    /**
     * Get the min weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'min_weekly_hours': string | null;
    /**
     * Get the max weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'max_weekly_hours': string | null;
}
/**
 * Serializer for course certificates.
 * @export
 * @interface V2ProgramCertificate
 */
export interface V2ProgramCertificate {
    /**
     *
     * @type {PublicUser}
     * @memberof V2ProgramCertificate
     */
    'user': PublicUser;
    /**
     *
     * @type {string}
     * @memberof V2ProgramCertificate
     */
    'uuid': string;
    /**
     * Indicates whether or not the certificate is revoked
     * @type {boolean}
     * @memberof V2ProgramCertificate
     */
    'is_revoked': boolean;
    /**
     *
     * @type {CertificatePageModel}
     * @memberof V2ProgramCertificate
     */
    'certificate_page': CertificatePageModel;
    /**
     *
     * @type {number}
     * @memberof V2ProgramCertificate
     */
    'program': number;
    /**
     *
     * @type {number}
     * @memberof V2ProgramCertificate
     */
    'certificate_page_revision': number | null;
}
/**
 * Serializer for ProgramCollection
 * @export
 * @interface V2ProgramCollection
 */
export interface V2ProgramCollection {
    /**
     *
     * @type {number}
     * @memberof V2ProgramCollection
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'description': string;
    /**
     *
     * @type {Array<number>}
     * @memberof V2ProgramCollection
     */
    'programs': Array<number>;
    /**
     *
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'created_on': string;
    /**
     *
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'updated_on': string;
}
/**
 * Serializer for a ProgramRequirement
 * @export
 * @interface V2ProgramRequirement
 */
export interface V2ProgramRequirement {
    /**
     *
     * @type {number}
     * @memberof V2ProgramRequirement
     */
    'id'?: number | null;
    /**
     *
     * @type {V2ProgramRequirementData}
     * @memberof V2ProgramRequirement
     */
    'data': V2ProgramRequirementData;
    /**
     *
     * @type {Array<V2ProgramRequirement>}
     * @memberof V2ProgramRequirement
     */
    'children'?: Array<V2ProgramRequirement>;
}
/**
 * Serializer for ProgramRequirement data
 * @export
 * @interface V2ProgramRequirementData
 */
export interface V2ProgramRequirementData {
    /**
     *
     * @type {V2ProgramRequirementDataNodeTypeEnum}
     * @memberof V2ProgramRequirementData
     */
    'node_type': V2ProgramRequirementDataNodeTypeEnum;
    /**
     *
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'course'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'program'?: string;
    /**
     *
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'operator'?: string | null;
    /**
     *
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'operator_value'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof V2ProgramRequirementData
     */
    'elective_flag'?: boolean | null;
}
/**
 * * `operator` - operator * `course` - course
 * @export
 * @enum {string}
 */
export declare const V2ProgramRequirementDataNodeTypeEnum: {
    /**
    * operator
    */
    readonly Operator: "operator";
    /**
    * course
    */
    readonly Course: "course";
};
export type V2ProgramRequirementDataNodeTypeEnum = typeof V2ProgramRequirementDataNodeTypeEnum[keyof typeof V2ProgramRequirementDataNodeTypeEnum];
/**
 *
 * @export
 * @interface V2ProgramRequirements
 */
export interface V2ProgramRequirements {
    /**
     *
     * @type {V2ProgramRequirementsCourses}
     * @memberof V2ProgramRequirements
     */
    'courses'?: V2ProgramRequirementsCourses;
    /**
     *
     * @type {V2ProgramRequirementsPrograms}
     * @memberof V2ProgramRequirements
     */
    'programs'?: V2ProgramRequirementsPrograms;
}
/**
 *
 * @export
 * @interface V2ProgramRequirementsCourses
 */
export interface V2ProgramRequirementsCourses {
    /**
     * List of required course IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V2ProgramRequirementsCourses
     */
    'required'?: Array<V1ProgramRequirementsRequiredInner>;
    /**
     * List of elective course IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V2ProgramRequirementsCourses
     */
    'electives'?: Array<V1ProgramRequirementsRequiredInner>;
}
/**
 *
 * @export
 * @interface V2ProgramRequirementsPrograms
 */
export interface V2ProgramRequirementsPrograms {
    /**
     * List of required program IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V2ProgramRequirementsPrograms
     */
    'required'?: Array<V1ProgramRequirementsRequiredInner>;
    /**
     * List of elective program IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V2ProgramRequirementsPrograms
     */
    'electives'?: Array<V1ProgramRequirementsRequiredInner>;
}
/**
 *
 * @export
 * @interface V2ProgramTopicsInner
 */
export interface V2ProgramTopicsInner {
    /**
     *
     * @type {string}
     * @memberof V2ProgramTopicsInner
     */
    'name'?: string;
}
/**
 * * `None` - ---- * `2` - Less than 2 years * `5` - 2-5 years * `10` - 6 - 10 years * `15` - 11 - 15 years * `20` - 16 - 20 years * `21` - More than 20 years * `0` - Prefer not to say
 * @export
 * @enum {number}
 */
export declare const YearsExperienceEnum: {
    /**
    * Less than 2 years
    */
    readonly NUMBER_2: 2;
    /**
    * 2-5 years
    */
    readonly NUMBER_5: 5;
    /**
    * 6 - 10 years
    */
    readonly NUMBER_10: 10;
    /**
    * 11 - 15 years
    */
    readonly NUMBER_15: 15;
    /**
    * 16 - 20 years
    */
    readonly NUMBER_20: 20;
    /**
    * More than 20 years
    */
    readonly NUMBER_21: 21;
    /**
    * Prefer not to say
    */
    readonly NUMBER_0: 0;
};
export type YearsExperienceEnum = typeof YearsExperienceEnum[keyof typeof YearsExperienceEnum];
/**
 * ApiApi - axios parameter creator
 * @export
 */
export declare const ApiApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRecordsProgramRevokeCreate: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
     * @param {number} id
     * @param {PartnerSchoolRequest} PartnerSchoolRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRecordsProgramShareCreate: (id: number, PartnerSchoolRequest: PartnerSchoolRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get learner record using program ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learnerRecordRetrieveById: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get learner record using share UUID
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learnerRecordRetrieveByUuid: (uuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApiApi - functional programming interface
 * @export
 */
export declare const ApiApiFp: (configuration?: Configuration) => {
    /**
     * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRecordsProgramRevokeCreate(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>>;
    /**
     * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
     * @param {number} id
     * @param {PartnerSchoolRequest} PartnerSchoolRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRecordsProgramShareCreate(id: number, PartnerSchoolRequest: PartnerSchoolRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>>;
    /**
     * Get learner record using program ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learnerRecordRetrieveById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>>;
    /**
     * Get learner record using share UUID
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learnerRecordRetrieveByUuid(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>>;
};
/**
 * ApiApi - factory interface
 * @export
 */
export declare const ApiApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
     * @param {ApiApiApiRecordsProgramRevokeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRecordsProgramRevokeCreate(requestParameters: ApiApiApiRecordsProgramRevokeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord>;
    /**
     * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
     * @param {ApiApiApiRecordsProgramShareCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRecordsProgramShareCreate(requestParameters: ApiApiApiRecordsProgramShareCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord>;
    /**
     * Get learner record using program ID
     * @param {ApiApiLearnerRecordRetrieveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learnerRecordRetrieveById(requestParameters: ApiApiLearnerRecordRetrieveByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord>;
    /**
     * Get learner record using share UUID
     * @param {ApiApiLearnerRecordRetrieveByUuidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    learnerRecordRetrieveByUuid(requestParameters: ApiApiLearnerRecordRetrieveByUuidRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord>;
};
/**
 * Request parameters for apiRecordsProgramRevokeCreate operation in ApiApi.
 * @export
 * @interface ApiApiApiRecordsProgramRevokeCreateRequest
 */
export interface ApiApiApiRecordsProgramRevokeCreateRequest {
    /**
     *
     * @type {number}
     * @memberof ApiApiApiRecordsProgramRevokeCreate
     */
    readonly id: number;
}
/**
 * Request parameters for apiRecordsProgramShareCreate operation in ApiApi.
 * @export
 * @interface ApiApiApiRecordsProgramShareCreateRequest
 */
export interface ApiApiApiRecordsProgramShareCreateRequest {
    /**
     *
     * @type {number}
     * @memberof ApiApiApiRecordsProgramShareCreate
     */
    readonly id: number;
    /**
     *
     * @type {PartnerSchoolRequest}
     * @memberof ApiApiApiRecordsProgramShareCreate
     */
    readonly PartnerSchoolRequest: PartnerSchoolRequest;
}
/**
 * Request parameters for learnerRecordRetrieveById operation in ApiApi.
 * @export
 * @interface ApiApiLearnerRecordRetrieveByIdRequest
 */
export interface ApiApiLearnerRecordRetrieveByIdRequest {
    /**
     *
     * @type {number}
     * @memberof ApiApiLearnerRecordRetrieveById
     */
    readonly id: number;
}
/**
 * Request parameters for learnerRecordRetrieveByUuid operation in ApiApi.
 * @export
 * @interface ApiApiLearnerRecordRetrieveByUuidRequest
 */
export interface ApiApiLearnerRecordRetrieveByUuidRequest {
    /**
     *
     * @type {string}
     * @memberof ApiApiLearnerRecordRetrieveByUuid
     */
    readonly uuid: string;
}
/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export declare class ApiApi extends BaseAPI {
    /**
     * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
     * @param {ApiApiApiRecordsProgramRevokeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    apiRecordsProgramRevokeCreate(requestParameters: ApiApiApiRecordsProgramRevokeCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LearnerRecord, any>>;
    /**
     * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
     * @param {ApiApiApiRecordsProgramShareCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    apiRecordsProgramShareCreate(requestParameters: ApiApiApiRecordsProgramShareCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LearnerRecord, any>>;
    /**
     * Get learner record using program ID
     * @param {ApiApiLearnerRecordRetrieveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    learnerRecordRetrieveById(requestParameters: ApiApiLearnerRecordRetrieveByIdRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LearnerRecord, any>>;
    /**
     * Get learner record using share UUID
     * @param {ApiApiLearnerRecordRetrieveByUuidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    learnerRecordRetrieveByUuid(requestParameters: ApiApiLearnerRecordRetrieveByUuidRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LearnerRecord, any>>;
}
/**
 * B2bApi - axios parameter creator
 * @export
 */
export declare const B2bApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Viewset for the ContractPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bContractsList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Viewset for the ContractPage model.
     * @param {string} contract_slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bContractsRetrieve: (contract_slug: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an enrollment for the given course run.
     * @param {string} readable_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bEnrollCreate: (readable_id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bOrganizationsList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {string} organization_slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bOrganizationsRetrieve: (organization_slug: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * B2bApi - functional programming interface
 * @export
 */
export declare const B2bApiFp: (configuration?: Configuration) => {
    /**
     * Viewset for the ContractPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bContractsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContractPage>>>;
    /**
     * Viewset for the ContractPage model.
     * @param {string} contract_slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bContractsRetrieve(contract_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractPage>>;
    /**
     * Create an enrollment for the given course run.
     * @param {string} readable_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bEnrollCreate(readable_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateB2BEnrollment>>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bOrganizationsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationPage>>>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {string} organization_slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bOrganizationsRetrieve(organization_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPage>>;
};
/**
 * B2bApi - factory interface
 * @export
 */
export declare const B2bApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Viewset for the ContractPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bContractsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<ContractPage>>;
    /**
     * Viewset for the ContractPage model.
     * @param {B2bApiB2bContractsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bContractsRetrieve(requestParameters: B2bApiB2bContractsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContractPage>;
    /**
     * Create an enrollment for the given course run.
     * @param {B2bApiB2bEnrollCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bEnrollCreate(requestParameters: B2bApiB2bEnrollCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateB2BEnrollment>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bOrganizationsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationPage>>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {B2bApiB2bOrganizationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    b2bOrganizationsRetrieve(requestParameters: B2bApiB2bOrganizationsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPage>;
};
/**
 * Request parameters for b2bContractsRetrieve operation in B2bApi.
 * @export
 * @interface B2bApiB2bContractsRetrieveRequest
 */
export interface B2bApiB2bContractsRetrieveRequest {
    /**
     *
     * @type {string}
     * @memberof B2bApiB2bContractsRetrieve
     */
    readonly contract_slug: string;
}
/**
 * Request parameters for b2bEnrollCreate operation in B2bApi.
 * @export
 * @interface B2bApiB2bEnrollCreateRequest
 */
export interface B2bApiB2bEnrollCreateRequest {
    /**
     *
     * @type {string}
     * @memberof B2bApiB2bEnrollCreate
     */
    readonly readable_id: string;
}
/**
 * Request parameters for b2bOrganizationsRetrieve operation in B2bApi.
 * @export
 * @interface B2bApiB2bOrganizationsRetrieveRequest
 */
export interface B2bApiB2bOrganizationsRetrieveRequest {
    /**
     *
     * @type {string}
     * @memberof B2bApiB2bOrganizationsRetrieve
     */
    readonly organization_slug: string;
}
/**
 * B2bApi - object-oriented interface
 * @export
 * @class B2bApi
 * @extends {BaseAPI}
 */
export declare class B2bApi extends BaseAPI {
    /**
     * Viewset for the ContractPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bContractsList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ContractPage[], any>>;
    /**
     * Viewset for the ContractPage model.
     * @param {B2bApiB2bContractsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bContractsRetrieve(requestParameters: B2bApiB2bContractsRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ContractPage, any>>;
    /**
     * Create an enrollment for the given course run.
     * @param {B2bApiB2bEnrollCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bEnrollCreate(requestParameters: B2bApiB2bEnrollCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateB2BEnrollment, any>>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bOrganizationsList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationPage[], any>>;
    /**
     * Viewset for the OrganizationPage model.
     * @param {B2bApiB2bOrganizationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bOrganizationsRetrieve(requestParameters: B2bApiB2bOrganizationsRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationPage, any>>;
}
/**
 * ChangeEmailsApi - axios parameter creator
 * @export
 */
export declare const ChangeEmailsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailRequestCreateRequest} ChangeEmailRequestCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsCreate: (ChangeEmailRequestCreateRequest: ChangeEmailRequestCreateRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Viewset for creating and updating email change requests
     * @param {string} code
     * @param {PatchedChangeEmailRequestUpdateRequest} [PatchedChangeEmailRequestUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsPartialUpdate: (code: string, PatchedChangeEmailRequestUpdateRequest?: PatchedChangeEmailRequestUpdateRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Viewset for creating and updating email change requests
     * @param {string} code
     * @param {ChangeEmailRequestUpdateRequest} ChangeEmailRequestUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsUpdate: (code: string, ChangeEmailRequestUpdateRequest: ChangeEmailRequestUpdateRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChangeEmailsApi - functional programming interface
 * @export
 */
export declare const ChangeEmailsApiFp: (configuration?: Configuration) => {
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailRequestCreateRequest} ChangeEmailRequestCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsCreate(ChangeEmailRequestCreateRequest: ChangeEmailRequestCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeEmailRequestCreate>>;
    /**
     * Viewset for creating and updating email change requests
     * @param {string} code
     * @param {PatchedChangeEmailRequestUpdateRequest} [PatchedChangeEmailRequestUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsPartialUpdate(code: string, PatchedChangeEmailRequestUpdateRequest?: PatchedChangeEmailRequestUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeEmailRequestUpdate>>;
    /**
     * Viewset for creating and updating email change requests
     * @param {string} code
     * @param {ChangeEmailRequestUpdateRequest} ChangeEmailRequestUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsUpdate(code: string, ChangeEmailRequestUpdateRequest: ChangeEmailRequestUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeEmailRequestUpdate>>;
};
/**
 * ChangeEmailsApi - factory interface
 * @export
 */
export declare const ChangeEmailsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsCreate(requestParameters: ChangeEmailsApiChangeEmailsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangeEmailRequestCreate>;
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsPartialUpdate(requestParameters: ChangeEmailsApiChangeEmailsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangeEmailRequestUpdate>;
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmailsUpdate(requestParameters: ChangeEmailsApiChangeEmailsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangeEmailRequestUpdate>;
};
/**
 * Request parameters for changeEmailsCreate operation in ChangeEmailsApi.
 * @export
 * @interface ChangeEmailsApiChangeEmailsCreateRequest
 */
export interface ChangeEmailsApiChangeEmailsCreateRequest {
    /**
     *
     * @type {ChangeEmailRequestCreateRequest}
     * @memberof ChangeEmailsApiChangeEmailsCreate
     */
    readonly ChangeEmailRequestCreateRequest: ChangeEmailRequestCreateRequest;
}
/**
 * Request parameters for changeEmailsPartialUpdate operation in ChangeEmailsApi.
 * @export
 * @interface ChangeEmailsApiChangeEmailsPartialUpdateRequest
 */
export interface ChangeEmailsApiChangeEmailsPartialUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof ChangeEmailsApiChangeEmailsPartialUpdate
     */
    readonly code: string;
    /**
     *
     * @type {PatchedChangeEmailRequestUpdateRequest}
     * @memberof ChangeEmailsApiChangeEmailsPartialUpdate
     */
    readonly PatchedChangeEmailRequestUpdateRequest?: PatchedChangeEmailRequestUpdateRequest;
}
/**
 * Request parameters for changeEmailsUpdate operation in ChangeEmailsApi.
 * @export
 * @interface ChangeEmailsApiChangeEmailsUpdateRequest
 */
export interface ChangeEmailsApiChangeEmailsUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof ChangeEmailsApiChangeEmailsUpdate
     */
    readonly code: string;
    /**
     *
     * @type {ChangeEmailRequestUpdateRequest}
     * @memberof ChangeEmailsApiChangeEmailsUpdate
     */
    readonly ChangeEmailRequestUpdateRequest: ChangeEmailRequestUpdateRequest;
}
/**
 * ChangeEmailsApi - object-oriented interface
 * @export
 * @class ChangeEmailsApi
 * @extends {BaseAPI}
 */
export declare class ChangeEmailsApi extends BaseAPI {
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    changeEmailsCreate(requestParameters: ChangeEmailsApiChangeEmailsCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChangeEmailRequestCreate, any>>;
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    changeEmailsPartialUpdate(requestParameters: ChangeEmailsApiChangeEmailsPartialUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChangeEmailRequestUpdate, any>>;
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    changeEmailsUpdate(requestParameters: ChangeEmailsApiChangeEmailsUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChangeEmailRequestUpdate, any>>;
}
/**
 * CountriesApi - axios parameter creator
 * @export
 */
export declare const CountriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get generator for countries/states list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countriesList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CountriesApi - functional programming interface
 * @export
 */
export declare const CountriesApiFp: (configuration?: Configuration) => {
    /**
     * Get generator for countries/states list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countriesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Country>>>;
};
/**
 * CountriesApi - factory interface
 * @export
 */
export declare const CountriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get generator for countries/states list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countriesList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Country>>;
};
/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export declare class CountriesApi extends BaseAPI {
    /**
     * Get generator for countries/states list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    countriesList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Country[], any>>;
}
/**
 * CourseCertificatesApi - axios parameter creator
 * @export
 */
export declare const CourseCertificatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a course certificate by UUID.
     * @param {string} cert_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseCertificatesRetrieve: (cert_uuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CourseCertificatesApi - functional programming interface
 * @export
 */
export declare const CourseCertificatesApiFp: (configuration?: Configuration) => {
    /**
     * Get a course certificate by UUID.
     * @param {string} cert_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseCertificatesRetrieve(cert_uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2CourseRunCertificate>>;
};
/**
 * CourseCertificatesApi - factory interface
 * @export
 */
export declare const CourseCertificatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a course certificate by UUID.
     * @param {CourseCertificatesApiCourseCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseCertificatesRetrieve(requestParameters: CourseCertificatesApiCourseCertificatesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CourseRunCertificate>;
};
/**
 * Request parameters for courseCertificatesRetrieve operation in CourseCertificatesApi.
 * @export
 * @interface CourseCertificatesApiCourseCertificatesRetrieveRequest
 */
export interface CourseCertificatesApiCourseCertificatesRetrieveRequest {
    /**
     *
     * @type {string}
     * @memberof CourseCertificatesApiCourseCertificatesRetrieve
     */
    readonly cert_uuid: string;
}
/**
 * CourseCertificatesApi - object-oriented interface
 * @export
 * @class CourseCertificatesApi
 * @extends {BaseAPI}
 */
export declare class CourseCertificatesApi extends BaseAPI {
    /**
     * Get a course certificate by UUID.
     * @param {CourseCertificatesApiCourseCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCertificatesApi
     */
    courseCertificatesRetrieve(requestParameters: CourseCertificatesApiCourseCertificatesRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V2CourseRunCertificate, any>>;
}
/**
 * CourseRunsApi - axios parameter creator
 * @export
 */
export declare const CourseRunsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * API view set for CourseRuns
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseRunsList: (id?: number, live?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API view set for CourseRuns
     * @param {number} id A unique integer value identifying this course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseRunsRetrieve: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CourseRunsApi - functional programming interface
 * @export
 */
export declare const CourseRunsApiFp: (configuration?: Configuration) => {
    /**
     * API view set for CourseRuns
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseRunsList(id?: number, live?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1CourseRunWithCourse>>>;
    /**
     * API view set for CourseRuns
     * @param {number} id A unique integer value identifying this course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseRunsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CourseRunWithCourse>>;
};
/**
 * CourseRunsApi - factory interface
 * @export
 */
export declare const CourseRunsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseRunsList(requestParameters?: CourseRunsApiCourseRunsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<V1CourseRunWithCourse>>;
    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    courseRunsRetrieve(requestParameters: CourseRunsApiCourseRunsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CourseRunWithCourse>;
};
/**
 * Request parameters for courseRunsList operation in CourseRunsApi.
 * @export
 * @interface CourseRunsApiCourseRunsListRequest
 */
export interface CourseRunsApiCourseRunsListRequest {
    /**
     *
     * @type {number}
     * @memberof CourseRunsApiCourseRunsList
     */
    readonly id?: number;
    /**
     *
     * @type {boolean}
     * @memberof CourseRunsApiCourseRunsList
     */
    readonly live?: boolean;
}
/**
 * Request parameters for courseRunsRetrieve operation in CourseRunsApi.
 * @export
 * @interface CourseRunsApiCourseRunsRetrieveRequest
 */
export interface CourseRunsApiCourseRunsRetrieveRequest {
    /**
     * A unique integer value identifying this course run.
     * @type {number}
     * @memberof CourseRunsApiCourseRunsRetrieve
     */
    readonly id: number;
}
/**
 * CourseRunsApi - object-oriented interface
 * @export
 * @class CourseRunsApi
 * @extends {BaseAPI}
 */
export declare class CourseRunsApi extends BaseAPI {
    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseRunsApi
     */
    courseRunsList(requestParameters?: CourseRunsApiCourseRunsListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V1CourseRunWithCourse[], any>>;
    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseRunsApi
     */
    courseRunsRetrieve(requestParameters: CourseRunsApiCourseRunsRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V1CourseRunWithCourse, any>>;
}
/**
 * CoursesApi - axios parameter creator
 * @export
 */
export declare const CoursesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all courses - API v1
     * @param {boolean} [courserun_is_enrollable]
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {number} [page] A page number within the paginated result set.
     * @param {boolean} [page__live]
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CoursesList: (courserun_is_enrollable?: boolean, id?: number, live?: boolean, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a specific course - API v1
     * @param {number} id A unique integer value identifying this course.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CoursesRetrieve: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all courses - API v2
     * @param {boolean} [courserun_is_enrollable] Course Run Is Enrollable
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {boolean} [include_approved_financial_aid] Include approved financial assistance information
     * @param {boolean} [live]
     * @param {number} [org_id] Only show courses belonging to this B2B/UAI organization
     * @param {number} [page] A page number within the paginated result set.
     * @param {boolean} [page__live]
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CoursesList: (courserun_is_enrollable?: boolean, id?: Array<number>, include_approved_financial_aid?: boolean, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a specific course - API v2
     * @param {number} id A unique integer value identifying this course.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CoursesRetrieve: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CoursesApi - functional programming interface
 * @export
 */
export declare const CoursesApiFp: (configuration?: Configuration) => {
    /**
     * List all courses - API v1
     * @param {boolean} [courserun_is_enrollable]
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {number} [page] A page number within the paginated result set.
     * @param {boolean} [page__live]
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CoursesList(courserun_is_enrollable?: boolean, id?: number, live?: boolean, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV1CourseWithCourseRunsList>>;
    /**
     * Retrieve a specific course - API v1
     * @param {number} id A unique integer value identifying this course.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CoursesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CourseWithCourseRuns>>;
    /**
     * List all courses - API v2
     * @param {boolean} [courserun_is_enrollable] Course Run Is Enrollable
     * @param {Array<number>} [id] Multiple values may be separated by commas.
     * @param {boolean} [include_approved_financial_aid] Include approved financial assistance information
     * @param {boolean} [live]
     * @param {number} [org_id] Only show courses belonging to this B2B/UAI organization
     * @param {number} [page] A page number within the paginated result set.
     * @param {boolean} [page__live]
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CoursesList(courserun_is_enrollable?: boolean, id?: Array<number>, include_approved_financial_aid?: boolean, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV2CourseWithCourseRunsList>>;
    /**
     * Retrieve a specific course - API v2
     * @param {number} id A unique integer value identifying this course.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CoursesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2CourseWithCourseRuns>>;
};
/**
 * CoursesApi - factory interface
 * @export
 */
export declare const CoursesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all courses - API v1
     * @param {CoursesApiApiV1CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CoursesList(requestParameters?: CoursesApiApiV1CoursesListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV1CourseWithCourseRunsList>;
    /**
     * Retrieve a specific course - API v1
     * @param {CoursesApiApiV1CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CoursesRetrieve(requestParameters: CoursesApiApiV1CoursesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CourseWithCourseRuns>;
    /**
     * List all courses - API v2
     * @param {CoursesApiApiV2CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CoursesList(requestParameters?: CoursesApiApiV2CoursesListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV2CourseWithCourseRunsList>;
    /**
     * Retrieve a specific course - API v2
     * @param {CoursesApiApiV2CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2CoursesRetrieve(requestParameters: CoursesApiApiV2CoursesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CourseWithCourseRuns>;
};
/**
 * Request parameters for apiV1CoursesList operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV1CoursesListRequest
 */
export interface CoursesApiApiV1CoursesListRequest {
    /**
     *
     * @type {boolean}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly courserun_is_enrollable?: boolean;
    /**
     *
     * @type {number}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly id?: number;
    /**
     *
     * @type {boolean}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly live?: boolean;
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly page?: number;
    /**
     *
     * @type {boolean}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly page__live?: boolean;
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly page_size?: number;
    /**
     *
     * @type {string}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly readable_id?: string;
}
/**
 * Request parameters for apiV1CoursesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV1CoursesRetrieveRequest
 */
export interface CoursesApiApiV1CoursesRetrieveRequest {
    /**
     * A unique integer value identifying this course.
     * @type {number}
     * @memberof CoursesApiApiV1CoursesRetrieve
     */
    readonly id: number;
}
/**
 * Request parameters for apiV2CoursesList operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV2CoursesListRequest
 */
export interface CoursesApiApiV2CoursesListRequest {
    /**
     * Course Run Is Enrollable
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly courserun_is_enrollable?: boolean;
    /**
     * Multiple values may be separated by commas.
     * @type {Array<number>}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly id?: Array<number>;
    /**
     * Include approved financial assistance information
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly include_approved_financial_aid?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly live?: boolean;
    /**
     * Only show courses belonging to this B2B/UAI organization
     * @type {number}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly org_id?: number;
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly page?: number;
    /**
     *
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly page__live?: boolean;
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly page_size?: number;
    /**
     *
     * @type {string}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly readable_id?: string;
}
/**
 * Request parameters for apiV2CoursesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV2CoursesRetrieveRequest
 */
export interface CoursesApiApiV2CoursesRetrieveRequest {
    /**
     * A unique integer value identifying this course.
     * @type {number}
     * @memberof CoursesApiApiV2CoursesRetrieve
     */
    readonly id: number;
}
/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export declare class CoursesApi extends BaseAPI {
    /**
     * List all courses - API v1
     * @param {CoursesApiApiV1CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV1CoursesList(requestParameters?: CoursesApiApiV1CoursesListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedV1CourseWithCourseRunsList, any>>;
    /**
     * Retrieve a specific course - API v1
     * @param {CoursesApiApiV1CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV1CoursesRetrieve(requestParameters: CoursesApiApiV1CoursesRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V1CourseWithCourseRuns, any>>;
    /**
     * List all courses - API v2
     * @param {CoursesApiApiV2CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV2CoursesList(requestParameters?: CoursesApiApiV2CoursesListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedV2CourseWithCourseRunsList, any>>;
    /**
     * Retrieve a specific course - API v2
     * @param {CoursesApiApiV2CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV2CoursesRetrieve(requestParameters: CoursesApiApiV2CoursesRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V2CourseWithCourseRuns, any>>;
}
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export declare const DepartmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List departments - v1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsListV1: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List departments - v2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsListV2: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get department details - v1
     * @param {number} id A unique integer value identifying this department.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsRetrieveV1: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get department details - v2
     * @param {number} id A unique integer value identifying this department.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsRetrieveV2: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export declare const DepartmentsApiFp: (configuration?: Configuration) => {
    /**
     * List departments - v1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsListV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentWithCount>>>;
    /**
     * List departments - v2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsListV2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentWithCoursesAndPrograms>>>;
    /**
     * Get department details - v1
     * @param {number} id A unique integer value identifying this department.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsRetrieveV1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentWithCount>>;
    /**
     * Get department details - v2
     * @param {number} id A unique integer value identifying this department.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsRetrieveV2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentWithCoursesAndPrograms>>;
};
/**
 * DepartmentsApi - factory interface
 * @export
 */
export declare const DepartmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List departments - v1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<DepartmentWithCount>>;
    /**
     * List departments - v2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsListV2(options?: RawAxiosRequestConfig): AxiosPromise<Array<DepartmentWithCoursesAndPrograms>>;
    /**
     * Get department details - v1
     * @param {DepartmentsApiDepartmentsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsRetrieveV1(requestParameters: DepartmentsApiDepartmentsRetrieveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentWithCount>;
    /**
     * Get department details - v2
     * @param {DepartmentsApiDepartmentsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    departmentsRetrieveV2(requestParameters: DepartmentsApiDepartmentsRetrieveV2Request, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentWithCoursesAndPrograms>;
};
/**
 * Request parameters for departmentsRetrieveV1 operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiDepartmentsRetrieveV1Request
 */
export interface DepartmentsApiDepartmentsRetrieveV1Request {
    /**
     * A unique integer value identifying this department.
     * @type {number}
     * @memberof DepartmentsApiDepartmentsRetrieveV1
     */
    readonly id: number;
}
/**
 * Request parameters for departmentsRetrieveV2 operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiDepartmentsRetrieveV2Request
 */
export interface DepartmentsApiDepartmentsRetrieveV2Request {
    /**
     * A unique integer value identifying this department.
     * @type {number}
     * @memberof DepartmentsApiDepartmentsRetrieveV2
     */
    readonly id: number;
}
/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
export declare class DepartmentsApi extends BaseAPI {
    /**
     * List departments - v1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsListV1(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DepartmentWithCount[], any>>;
    /**
     * List departments - v2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsListV2(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DepartmentWithCoursesAndPrograms[], any>>;
    /**
     * Get department details - v1
     * @param {DepartmentsApiDepartmentsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsRetrieveV1(requestParameters: DepartmentsApiDepartmentsRetrieveV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DepartmentWithCount, any>>;
    /**
     * Get department details - v2
     * @param {DepartmentsApiDepartmentsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsRetrieveV2(requestParameters: DepartmentsApiDepartmentsRetrieveV2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DepartmentWithCoursesAndPrograms, any>>;
}
/**
 * EnrollmentsApi - axios parameter creator
 * @export
 */
export declare const EnrollmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * View to handle direct POST requests to enroll in a course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEnrollmentsCreate: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API view set for user enrollments
     * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsCreate: (CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API view set for user enrollments
     * @param {number} id A unique integer value identifying this course run enrollment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsDestroy: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API view set for user enrollments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update enrollment email preferences
     * @param {number} id A unique integer value identifying this course run enrollment.
     * @param {PatchedUpdateCourseRunEnrollmentRequest} [PatchedUpdateCourseRunEnrollmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsPartialUpdate: (id: number, PatchedUpdateCourseRunEnrollmentRequest?: PatchedUpdateCourseRunEnrollmentRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API view set for user enrollments
     * @param {number} id A unique integer value identifying this course run enrollment.
     * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsUpdate: (id: number, CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnrollmentsApi - functional programming interface
 * @export
 */
export declare const EnrollmentsApiFp: (configuration?: Configuration) => {
    /**
     * View to handle direct POST requests to enroll in a course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEnrollmentsCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * API view set for user enrollments
     * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsCreate(CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseRunEnrollment>>;
    /**
     * API view set for user enrollments
     * @param {number} id A unique integer value identifying this course run enrollment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * API view set for user enrollments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseRunEnrollment>>>;
    /**
     * Update enrollment email preferences
     * @param {number} id A unique integer value identifying this course run enrollment.
     * @param {PatchedUpdateCourseRunEnrollmentRequest} [PatchedUpdateCourseRunEnrollmentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsPartialUpdate(id: number, PatchedUpdateCourseRunEnrollmentRequest?: PatchedUpdateCourseRunEnrollmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseRunEnrollment>>;
    /**
     * API view set for user enrollments
     * @param {number} id A unique integer value identifying this course run enrollment.
     * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsUpdate(id: number, CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseRunEnrollment>>;
};
/**
 * EnrollmentsApi - factory interface
 * @export
 */
export declare const EnrollmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * View to handle direct POST requests to enroll in a course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiEnrollmentsCreate(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsCreate(requestParameters: EnrollmentsApiEnrollmentsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseRunEnrollment>;
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsDestroy(requestParameters: EnrollmentsApiEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * API view set for user enrollments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseRunEnrollment>>;
    /**
     * Update enrollment email preferences
     * @param {EnrollmentsApiEnrollmentsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsPartialUpdate(requestParameters: EnrollmentsApiEnrollmentsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseRunEnrollment>;
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollmentsUpdate(requestParameters: EnrollmentsApiEnrollmentsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseRunEnrollment>;
};
/**
 * Request parameters for enrollmentsCreate operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsCreateRequest
 */
export interface EnrollmentsApiEnrollmentsCreateRequest {
    /**
     *
     * @type {CourseRunEnrollmentRequest}
     * @memberof EnrollmentsApiEnrollmentsCreate
     */
    readonly CourseRunEnrollmentRequest: CourseRunEnrollmentRequest;
}
/**
 * Request parameters for enrollmentsDestroy operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsDestroyRequest
 */
export interface EnrollmentsApiEnrollmentsDestroyRequest {
    /**
     * A unique integer value identifying this course run enrollment.
     * @type {number}
     * @memberof EnrollmentsApiEnrollmentsDestroy
     */
    readonly id: number;
}
/**
 * Request parameters for enrollmentsPartialUpdate operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsPartialUpdateRequest
 */
export interface EnrollmentsApiEnrollmentsPartialUpdateRequest {
    /**
     * A unique integer value identifying this course run enrollment.
     * @type {number}
     * @memberof EnrollmentsApiEnrollmentsPartialUpdate
     */
    readonly id: number;
    /**
     *
     * @type {PatchedUpdateCourseRunEnrollmentRequest}
     * @memberof EnrollmentsApiEnrollmentsPartialUpdate
     */
    readonly PatchedUpdateCourseRunEnrollmentRequest?: PatchedUpdateCourseRunEnrollmentRequest;
}
/**
 * Request parameters for enrollmentsUpdate operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsUpdateRequest
 */
export interface EnrollmentsApiEnrollmentsUpdateRequest {
    /**
     * A unique integer value identifying this course run enrollment.
     * @type {number}
     * @memberof EnrollmentsApiEnrollmentsUpdate
     */
    readonly id: number;
    /**
     *
     * @type {CourseRunEnrollmentRequest}
     * @memberof EnrollmentsApiEnrollmentsUpdate
     */
    readonly CourseRunEnrollmentRequest: CourseRunEnrollmentRequest;
}
/**
 * EnrollmentsApi - object-oriented interface
 * @export
 * @class EnrollmentsApi
 * @extends {BaseAPI}
 */
export declare class EnrollmentsApi extends BaseAPI {
    /**
     * View to handle direct POST requests to enroll in a course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    apiEnrollmentsCreate(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsCreate(requestParameters: EnrollmentsApiEnrollmentsCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CourseRunEnrollment, any>>;
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsDestroy(requestParameters: EnrollmentsApiEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * API view set for user enrollments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CourseRunEnrollment[], any>>;
    /**
     * Update enrollment email preferences
     * @param {EnrollmentsApiEnrollmentsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsPartialUpdate(requestParameters: EnrollmentsApiEnrollmentsPartialUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CourseRunEnrollment, any>>;
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsUpdate(requestParameters: EnrollmentsApiEnrollmentsUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CourseRunEnrollment, any>>;
}
/**
 * PagesApi - axios parameter creator
 * @export
 */
export declare const PagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns pages of all types
     * @summary List all Wagtail Pages
     * @param {string} [fields] Specify fields (e.g. &#x60;*&#x60;)
     * @param {string} [type] Filter by Wagtail page type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesList: (fields?: string, type?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns details of a specific Wagtail page by ID
     * @summary Get Wagtail Page Details
     * @param {number} id ID of the Wagtail page
     * @param {number} [revision_id] Optional certificate revision ID to retrieve a specific revision of the certificate page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesRetrieve: (id: number, revision_id?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns pages of type cms.CertificatePage
     * @summary List all Certificate Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsCertificatePageRetrieve: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns pages of type cms.CoursePage
     * @summary List all Course Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsCoursePageRetrieve: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns pages of type cms.ProgramPage
     * @summary List all Program Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsProgramPageRetrieve: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PagesApi - functional programming interface
 * @export
 */
export declare const PagesApiFp: (configuration?: Configuration) => {
    /**
     * Returns pages of all types
     * @summary List all Wagtail Pages
     * @param {string} [fields] Specify fields (e.g. &#x60;*&#x60;)
     * @param {string} [type] Filter by Wagtail page type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesList(fields?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageList>>;
    /**
     * Returns details of a specific Wagtail page by ID
     * @summary Get Wagtail Page Details
     * @param {number} id ID of the Wagtail page
     * @param {number} [revision_id] Optional certificate revision ID to retrieve a specific revision of the certificate page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesRetrieve(id: number, revision_id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagesRetrieve200Response>>;
    /**
     * Returns pages of type cms.CertificatePage
     * @summary List all Certificate Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsCertificatePageRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificatePageList>>;
    /**
     * Returns pages of type cms.CoursePage
     * @summary List all Course Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsCoursePageRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursePageList>>;
    /**
     * Returns pages of type cms.ProgramPage
     * @summary List all Program Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsProgramPageRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramPageList>>;
};
/**
 * PagesApi - factory interface
 * @export
 */
export declare const PagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns pages of all types
     * @summary List all Wagtail Pages
     * @param {PagesApiPagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesList(requestParameters?: PagesApiPagesListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageList>;
    /**
     * Returns details of a specific Wagtail page by ID
     * @summary Get Wagtail Page Details
     * @param {PagesApiPagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesRetrieve(requestParameters: PagesApiPagesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagesRetrieve200Response>;
    /**
     * Returns pages of type cms.CertificatePage
     * @summary List all Certificate Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsCertificatePageRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<CertificatePageList>;
    /**
     * Returns pages of type cms.CoursePage
     * @summary List all Course Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsCoursePageRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<CoursePageList>;
    /**
     * Returns pages of type cms.ProgramPage
     * @summary List all Program Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pagesfieldstypecmsProgramPageRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<ProgramPageList>;
};
/**
 * Request parameters for pagesList operation in PagesApi.
 * @export
 * @interface PagesApiPagesListRequest
 */
export interface PagesApiPagesListRequest {
    /**
     * Specify fields (e.g. &#x60;*&#x60;)
     * @type {string}
     * @memberof PagesApiPagesList
     */
    readonly fields?: string;
    /**
     * Filter by Wagtail page type
     * @type {string}
     * @memberof PagesApiPagesList
     */
    readonly type?: string;
}
/**
 * Request parameters for pagesRetrieve operation in PagesApi.
 * @export
 * @interface PagesApiPagesRetrieveRequest
 */
export interface PagesApiPagesRetrieveRequest {
    /**
     * ID of the Wagtail page
     * @type {number}
     * @memberof PagesApiPagesRetrieve
     */
    readonly id: number;
    /**
     * Optional certificate revision ID to retrieve a specific revision of the certificate page
     * @type {number}
     * @memberof PagesApiPagesRetrieve
     */
    readonly revision_id?: number;
}
/**
 * PagesApi - object-oriented interface
 * @export
 * @class PagesApi
 * @extends {BaseAPI}
 */
export declare class PagesApi extends BaseAPI {
    /**
     * Returns pages of all types
     * @summary List all Wagtail Pages
     * @param {PagesApiPagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesList(requestParameters?: PagesApiPagesListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PageList, any>>;
    /**
     * Returns details of a specific Wagtail page by ID
     * @summary Get Wagtail Page Details
     * @param {PagesApiPagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesRetrieve(requestParameters: PagesApiPagesRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PagesRetrieve200Response, any>>;
    /**
     * Returns pages of type cms.CertificatePage
     * @summary List all Certificate Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesfieldstypecmsCertificatePageRetrieve(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificatePageList, any>>;
    /**
     * Returns pages of type cms.CoursePage
     * @summary List all Course Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesfieldstypecmsCoursePageRetrieve(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CoursePageList, any>>;
    /**
     * Returns pages of type cms.ProgramPage
     * @summary List all Program Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesfieldstypecmsProgramPageRetrieve(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProgramPageList, any>>;
}
/**
 * ProgramCertificatesApi - axios parameter creator
 * @export
 */
export declare const ProgramCertificatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a program certificate by UUID.
     * @param {string} cert_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCertificatesRetrieve: (cert_uuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProgramCertificatesApi - functional programming interface
 * @export
 */
export declare const ProgramCertificatesApiFp: (configuration?: Configuration) => {
    /**
     * Get a program certificate by UUID.
     * @param {string} cert_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCertificatesRetrieve(cert_uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ProgramCertificate>>;
};
/**
 * ProgramCertificatesApi - factory interface
 * @export
 */
export declare const ProgramCertificatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a program certificate by UUID.
     * @param {ProgramCertificatesApiProgramCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCertificatesRetrieve(requestParameters: ProgramCertificatesApiProgramCertificatesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ProgramCertificate>;
};
/**
 * Request parameters for programCertificatesRetrieve operation in ProgramCertificatesApi.
 * @export
 * @interface ProgramCertificatesApiProgramCertificatesRetrieveRequest
 */
export interface ProgramCertificatesApiProgramCertificatesRetrieveRequest {
    /**
     *
     * @type {string}
     * @memberof ProgramCertificatesApiProgramCertificatesRetrieve
     */
    readonly cert_uuid: string;
}
/**
 * ProgramCertificatesApi - object-oriented interface
 * @export
 * @class ProgramCertificatesApi
 * @extends {BaseAPI}
 */
export declare class ProgramCertificatesApi extends BaseAPI {
    /**
     * Get a program certificate by UUID.
     * @param {ProgramCertificatesApiProgramCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCertificatesApi
     */
    programCertificatesRetrieve(requestParameters: ProgramCertificatesApiProgramCertificatesRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V2ProgramCertificate, any>>;
}
/**
 * ProgramCollectionsApi - axios parameter creator
 * @export
 */
export declare const ProgramCollectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [page_size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCollectionsList: (page?: number, page_size?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {number} id A unique integer value identifying this Program Collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCollectionsRetrieve: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProgramCollectionsApi - functional programming interface
 * @export
 */
export declare const ProgramCollectionsApiFp: (configuration?: Configuration) => {
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [page_size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCollectionsList(page?: number, page_size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV2ProgramCollectionList>>;
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {number} id A unique integer value identifying this Program Collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCollectionsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ProgramCollection>>;
};
/**
 * ProgramCollectionsApi - factory interface
 * @export
 */
export declare const ProgramCollectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCollectionsList(requestParameters?: ProgramCollectionsApiProgramCollectionsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV2ProgramCollectionList>;
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programCollectionsRetrieve(requestParameters: ProgramCollectionsApiProgramCollectionsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ProgramCollection>;
};
/**
 * Request parameters for programCollectionsList operation in ProgramCollectionsApi.
 * @export
 * @interface ProgramCollectionsApiProgramCollectionsListRequest
 */
export interface ProgramCollectionsApiProgramCollectionsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ProgramCollectionsApiProgramCollectionsList
     */
    readonly page?: number;
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramCollectionsApiProgramCollectionsList
     */
    readonly page_size?: number;
}
/**
 * Request parameters for programCollectionsRetrieve operation in ProgramCollectionsApi.
 * @export
 * @interface ProgramCollectionsApiProgramCollectionsRetrieveRequest
 */
export interface ProgramCollectionsApiProgramCollectionsRetrieveRequest {
    /**
     * A unique integer value identifying this Program Collection.
     * @type {number}
     * @memberof ProgramCollectionsApiProgramCollectionsRetrieve
     */
    readonly id: number;
}
/**
 * ProgramCollectionsApi - object-oriented interface
 * @export
 * @class ProgramCollectionsApi
 * @extends {BaseAPI}
 */
export declare class ProgramCollectionsApi extends BaseAPI {
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCollectionsApi
     */
    programCollectionsList(requestParameters?: ProgramCollectionsApiProgramCollectionsListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedV2ProgramCollectionList, any>>;
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCollectionsApi
     */
    programCollectionsRetrieve(requestParameters: ProgramCollectionsApiProgramCollectionsRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V2ProgramCollection, any>>;
}
/**
 * ProgramEnrollmentsApi - axios parameter creator
 * @export
 */
export declare const ProgramEnrollmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
     * @param {number} id Program enrollment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programEnrollmentsDestroy: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a unified set of program and course enrollments for the current user.
     * @param {number} id Program enrollment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programEnrollmentsList: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProgramEnrollmentsApi - functional programming interface
 * @export
 */
export declare const ProgramEnrollmentsApiFp: (configuration?: Configuration) => {
    /**
     * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
     * @param {number} id Program enrollment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programEnrollmentsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProgramEnrollmentDetail>>;
    /**
     * Returns a unified set of program and course enrollments for the current user.
     * @param {number} id Program enrollment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programEnrollmentsList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserProgramEnrollmentDetail>>>;
};
/**
 * ProgramEnrollmentsApi - factory interface
 * @export
 */
export declare const ProgramEnrollmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programEnrollmentsDestroy(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProgramEnrollmentDetail>;
    /**
     * Returns a unified set of program and course enrollments for the current user.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programEnrollmentsList(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserProgramEnrollmentDetail>>;
};
/**
 * Request parameters for programEnrollmentsDestroy operation in ProgramEnrollmentsApi.
 * @export
 * @interface ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest
 */
export interface ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest {
    /**
     * Program enrollment ID
     * @type {number}
     * @memberof ProgramEnrollmentsApiProgramEnrollmentsDestroy
     */
    readonly id: number;
}
/**
 * Request parameters for programEnrollmentsList operation in ProgramEnrollmentsApi.
 * @export
 * @interface ProgramEnrollmentsApiProgramEnrollmentsListRequest
 */
export interface ProgramEnrollmentsApiProgramEnrollmentsListRequest {
    /**
     * Program enrollment ID
     * @type {number}
     * @memberof ProgramEnrollmentsApiProgramEnrollmentsList
     */
    readonly id: number;
}
/**
 * ProgramEnrollmentsApi - object-oriented interface
 * @export
 * @class ProgramEnrollmentsApi
 * @extends {BaseAPI}
 */
export declare class ProgramEnrollmentsApi extends BaseAPI {
    /**
     * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEnrollmentsApi
     */
    programEnrollmentsDestroy(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProgramEnrollmentDetail, any>>;
    /**
     * Returns a unified set of program and course enrollments for the current user.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEnrollmentsApi
     */
    programEnrollmentsList(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProgramEnrollmentDetail[], any>>;
}
/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export declare const ProgramsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List Programs - v1
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsListV1: (id?: number, live?: boolean, page?: number, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Programs - v2
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {number} [org_id]
     * @param {number} [page] A page number within the paginated result set.
     * @param {boolean} [page__live]
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsListV2: (id?: number, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API view set for Programs - v1
     * @param {number} id A unique integer value identifying this program.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieveV1: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * API view set for Programs - v2
     * @param {number} id A unique integer value identifying this program.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieveV2: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProgramsApi - functional programming interface
 * @export
 */
export declare const ProgramsApiFp: (configuration?: Configuration) => {
    /**
     * List Programs - v1
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsListV1(id?: number, live?: boolean, page?: number, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV1ProgramList>>;
    /**
     * List Programs - v2
     * @param {number} [id]
     * @param {boolean} [live]
     * @param {number} [org_id]
     * @param {number} [page] A page number within the paginated result set.
     * @param {boolean} [page__live]
     * @param {number} [page_size] Number of results to return per page.
     * @param {string} [readable_id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsListV2(id?: number, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV2ProgramList>>;
    /**
     * API view set for Programs - v1
     * @param {number} id A unique integer value identifying this program.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieveV1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Program>>;
    /**
     * API view set for Programs - v2
     * @param {number} id A unique integer value identifying this program.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieveV2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Program>>;
};
/**
 * ProgramsApi - factory interface
 * @export
 */
export declare const ProgramsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List Programs - v1
     * @param {ProgramsApiProgramsListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsListV1(requestParameters?: ProgramsApiProgramsListV1Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV1ProgramList>;
    /**
     * List Programs - v2
     * @param {ProgramsApiProgramsListV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsListV2(requestParameters?: ProgramsApiProgramsListV2Request, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV2ProgramList>;
    /**
     * API view set for Programs - v1
     * @param {ProgramsApiProgramsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieveV1(requestParameters: ProgramsApiProgramsRetrieveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<V1Program>;
    /**
     * API view set for Programs - v2
     * @param {ProgramsApiProgramsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    programsRetrieveV2(requestParameters: ProgramsApiProgramsRetrieveV2Request, options?: RawAxiosRequestConfig): AxiosPromise<V2Program>;
};
/**
 * Request parameters for programsListV1 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsListV1Request
 */
export interface ProgramsApiProgramsListV1Request {
    /**
     *
     * @type {number}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly id?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly live?: boolean;
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly page?: number;
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly page_size?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly readable_id?: string;
}
/**
 * Request parameters for programsListV2 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsListV2Request
 */
export interface ProgramsApiProgramsListV2Request {
    /**
     *
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly id?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly live?: boolean;
    /**
     *
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly org_id?: number;
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly page?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly page__live?: boolean;
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly page_size?: number;
    /**
     *
     * @type {string}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly readable_id?: string;
}
/**
 * Request parameters for programsRetrieveV1 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsRetrieveV1Request
 */
export interface ProgramsApiProgramsRetrieveV1Request {
    /**
     * A unique integer value identifying this program.
     * @type {number}
     * @memberof ProgramsApiProgramsRetrieveV1
     */
    readonly id: number;
}
/**
 * Request parameters for programsRetrieveV2 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsRetrieveV2Request
 */
export interface ProgramsApiProgramsRetrieveV2Request {
    /**
     * A unique integer value identifying this program.
     * @type {number}
     * @memberof ProgramsApiProgramsRetrieveV2
     */
    readonly id: number;
}
/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export declare class ProgramsApi extends BaseAPI {
    /**
     * List Programs - v1
     * @param {ProgramsApiProgramsListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsListV1(requestParameters?: ProgramsApiProgramsListV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedV1ProgramList, any>>;
    /**
     * List Programs - v2
     * @param {ProgramsApiProgramsListV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsListV2(requestParameters?: ProgramsApiProgramsListV2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedV2ProgramList, any>>;
    /**
     * API view set for Programs - v1
     * @param {ProgramsApiProgramsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsRetrieveV1(requestParameters: ProgramsApiProgramsRetrieveV1Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V1Program, any>>;
    /**
     * API view set for Programs - v2
     * @param {ProgramsApiProgramsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsRetrieveV2(requestParameters: ProgramsApiProgramsRetrieveV2Request, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<V2Program, any>>;
}
/**
 * UserSearchApi - axios parameter creator
 * @export
 */
export declare const UserSearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {number} [l] Number of results to return per page.
     * @param {number} [o] The initial index from which to return the results.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearchList: (l?: number, o?: number, search?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearchRetrieve: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserSearchApi - functional programming interface
 * @export
 */
export declare const UserSearchApiFp: (configuration?: Configuration) => {
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {number} [l] Number of results to return per page.
     * @param {number} [o] The initial index from which to return the results.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearchList(l?: number, o?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedStaffDashboardUserList>>;
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearchRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffDashboardUser>>;
};
/**
 * UserSearchApi - factory interface
 * @export
 */
export declare const UserSearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearchList(requestParameters?: UserSearchApiUserSearchListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedStaffDashboardUserList>;
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearchRetrieve(requestParameters: UserSearchApiUserSearchRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<StaffDashboardUser>;
};
/**
 * Request parameters for userSearchList operation in UserSearchApi.
 * @export
 * @interface UserSearchApiUserSearchListRequest
 */
export interface UserSearchApiUserSearchListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof UserSearchApiUserSearchList
     */
    readonly l?: number;
    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof UserSearchApiUserSearchList
     */
    readonly o?: number;
    /**
     * A search term.
     * @type {string}
     * @memberof UserSearchApiUserSearchList
     */
    readonly search?: string;
}
/**
 * Request parameters for userSearchRetrieve operation in UserSearchApi.
 * @export
 * @interface UserSearchApiUserSearchRetrieveRequest
 */
export interface UserSearchApiUserSearchRetrieveRequest {
    /**
     * A unique integer value identifying this user.
     * @type {number}
     * @memberof UserSearchApiUserSearchRetrieve
     */
    readonly id: number;
}
/**
 * UserSearchApi - object-oriented interface
 * @export
 * @class UserSearchApi
 * @extends {BaseAPI}
 */
export declare class UserSearchApi extends BaseAPI {
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchApi
     */
    userSearchList(requestParameters?: UserSearchApiUserSearchListRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedStaffDashboardUserList, any>>;
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchApi
     */
    userSearchRetrieve(requestParameters: UserSearchApiUserSearchRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StaffDashboardUser, any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * User retrieve and update viewsets for the current user
     * @param {PatchedUserRequest} [PatchedUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCurrentUserPartialUpdate: (PatchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCurrentUserRetrieve: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {PatchedUserRequest} [PatchedUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePartialUpdate: (PatchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeRetrieve: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * User retrieve viewsets
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRetrieve: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * User retrieve and update viewsets for the current user
     * @param {PatchedUserRequest} [PatchedUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCurrentUserPartialUpdate(PatchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCurrentUserRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {PatchedUserRequest} [PatchedUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePartialUpdate(PatchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * User retrieve viewsets
     * @param {number} id A unique integer value identifying this user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicUser>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersCurrentUserPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCurrentUserPartialUpdate(requestParameters?: UsersApiUsersCurrentUserPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCurrentUserRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersMePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePartialUpdate(requestParameters?: UsersApiUsersMePartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     * User retrieve viewsets
     * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersRetrieve(requestParameters: UsersApiUsersRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicUser>;
};
/**
 * Request parameters for usersCurrentUserPartialUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersCurrentUserPartialUpdateRequest
 */
export interface UsersApiUsersCurrentUserPartialUpdateRequest {
    /**
     *
     * @type {PatchedUserRequest}
     * @memberof UsersApiUsersCurrentUserPartialUpdate
     */
    readonly PatchedUserRequest?: PatchedUserRequest;
}
/**
 * Request parameters for usersMePartialUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersMePartialUpdateRequest
 */
export interface UsersApiUsersMePartialUpdateRequest {
    /**
     *
     * @type {PatchedUserRequest}
     * @memberof UsersApiUsersMePartialUpdate
     */
    readonly PatchedUserRequest?: PatchedUserRequest;
}
/**
 * Request parameters for usersRetrieve operation in UsersApi.
 * @export
 * @interface UsersApiUsersRetrieveRequest
 */
export interface UsersApiUsersRetrieveRequest {
    /**
     * A unique integer value identifying this user.
     * @type {number}
     * @memberof UsersApiUsersRetrieve
     */
    readonly id: number;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersCurrentUserPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersCurrentUserPartialUpdate(requestParameters?: UsersApiUsersCurrentUserPartialUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersCurrentUserRetrieve(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersMePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMePartialUpdate(requestParameters?: UsersApiUsersMePartialUpdateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMeRetrieve(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any>>;
    /**
     * User retrieve viewsets
     * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersRetrieve(requestParameters: UsersApiUsersRetrieveRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicUser, any>>;
}
//# sourceMappingURL=api.d.ts.map
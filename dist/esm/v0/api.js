/* tslint:disable */
/* eslint-disable */
/**
 * MITx Online API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v0)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, operationServerMap } from './base';
/**
 * * `anytime` - anytime * `dated` - dated
 * @export
 * @enum {string}
 */
export const AvailabilityEnum = {
    /**
    * anytime
    */
    Anytime: 'anytime',
    /**
    * dated
    */
    Dated: 'dated'
};
/**
 *
 * @export
 * @enum {string}
 */
export const BlankEnum = {
    Empty: ''
};
/**
 * * `None` - ---- * `1` - Small/Start-up (1+ employees) * `9` - Small/Home office (1-9 employees) * `99` - Small (10-99 employees) * `999` - Small to medium-sized (100-999 employees) * `9999` - Medium-sized (1000-9999 employees) * `10000` - Large Enterprise (10,000+ employees) * `0` - Other (N/A or Don\'t know)
 * @export
 * @enum {number}
 */
export const CompanySizeEnum = {
    /**
    * Small/Start-up (1+ employees)
    */
    NUMBER_1: 1,
    /**
    * Small/Home office (1-9 employees)
    */
    NUMBER_9: 9,
    /**
    * Small (10-99 employees)
    */
    NUMBER_99: 99,
    /**
    * Small to medium-sized (100-999 employees)
    */
    NUMBER_999: 999,
    /**
    * Medium-sized (1000-9999 employees)
    */
    NUMBER_9999: 9999,
    /**
    * Large Enterprise (10,000+ employees)
    */
    NUMBER_10000: 10000,
    /**
    * Other (N/A or Don&#39;t know)
    */
    NUMBER_0: 0
};
/**
 * * `percent-off` - percent-off * `dollars-off` - dollars-off * `fixed-price` - fixed-price
 * @export
 * @enum {string}
 */
export const DiscountTypeEnum = {
    /**
    * percent-off
    */
    PercentOff: 'percent-off',
    /**
    * dollars-off
    */
    DollarsOff: 'dollars-off',
    /**
    * fixed-price
    */
    FixedPrice: 'fixed-price'
};
/**
 * * `audit` - audit * `verified` - verified
 * @export
 * @enum {string}
 */
export const EnrollmentModeEnum = {
    /**
    * audit
    */
    Audit: 'audit',
    /**
    * verified
    */
    Verified: 'verified'
};
/**
 * * `m` - Male * `f` - Female * `t` - Transgender * `nb` - Non-binary/non-conforming * `o` - Other/Prefer Not to Say
 * @export
 * @enum {string}
 */
export const GenderEnum = {
    /**
    * Male
    */
    M: 'm',
    /**
    * Female
    */
    F: 'f',
    /**
    * Transgender
    */
    T: 't',
    /**
    * Non-binary/non-conforming
    */
    Nb: 'nb',
    /**
    * Other/Prefer Not to Say
    */
    O: 'o'
};
/**
 * * `None` - ---- * `Doctorate` - Doctorate * `Master\'s or professional degree` - Master\'s or professional degree * `Bachelor\'s degree` - Bachelor\'s degree * `Associate degree` - Associate degree * `Secondary/high school` - Secondary/high school * `Junior secondary/junior high/middle school` - Junior secondary/junior high/middle school * `Elementary/primary school` - Elementary/primary school * `No formal education` - No formal education * `Other education` - Other education
 * @export
 * @enum {string}
 */
export const HighestEducationEnum = {
    /**
    * Doctorate
    */
    Doctorate: 'Doctorate',
    /**
    * Master&#39;s or professional degree
    */
    MastersOrProfessionalDegree: 'Master\'s or professional degree',
    /**
    * Bachelor&#39;s degree
    */
    BachelorsDegree: 'Bachelor\'s degree',
    /**
    * Associate degree
    */
    AssociateDegree: 'Associate degree',
    /**
    * Secondary/high school
    */
    SecondaryHighSchool: 'Secondary/high school',
    /**
    * Junior secondary/junior high/middle school
    */
    JuniorSecondaryJuniorHighMiddleSchool: 'Junior secondary/junior high/middle school',
    /**
    * Elementary/primary school
    */
    ElementaryPrimarySchool: 'Elementary/primary school',
    /**
    * No formal education
    */
    NoFormalEducation: 'No formal education',
    /**
    * Other education
    */
    OtherEducation: 'Other education'
};
/**
 * * `sso` - SSO * `non-sso` - Non-SSO
 * @export
 * @enum {string}
 */
export const IntegrationTypeEnum = {
    /**
    * SSO
    */
    Sso: 'sso',
    /**
    * Non-SSO
    */
    NonSso: 'non-sso'
};
/**
 *
 * @export
 * @enum {string}
 */
export const NullEnum = {};
/**
 * * `marketing` - marketing * `sales` - sales * `financial-assistance` - financial-assistance * `customer-support` - customer-support * `staff` - staff * `legacy` - legacy
 * @export
 * @enum {string}
 */
export const PaymentTypeEnum = {
    /**
    * marketing
    */
    Marketing: 'marketing',
    /**
    * sales
    */
    Sales: 'sales',
    /**
    * financial-assistance
    */
    FinancialAssistance: 'financial-assistance',
    /**
    * customer-support
    */
    CustomerSupport: 'customer-support',
    /**
    * staff
    */
    Staff: 'staff',
    /**
    * legacy
    */
    Legacy: 'legacy'
};
/**
 * * `one-time` - one-time * `one-time-per-user` - one-time-per-user * `unlimited` - unlimited
 * @export
 * @enum {string}
 */
export const RedemptionTypeEnum = {
    /**
    * one-time
    */
    OneTime: 'one-time',
    /**
    * one-time-per-user
    */
    OneTimePerUser: 'one-time-per-user',
    /**
    * unlimited
    */
    Unlimited: 'unlimited'
};
/**
 * * `b2b-disallowed` - b2b-disallowed * `b2b-error-no-contract` - b2b-error-no-contract * `b2b-error-no-product` - b2b-error-no-product * `b2b-error-missing-enrollment-code` - b2b-error-missing-enrollment-code * `b2b-error-invalid-enrollment-code` - b2b-error-invalid-enrollment-code * `b2b-error-requires-checkout` - b2b-error-requires-checkout * `b2b-enroll-success` - b2b-enroll-success
 * @export
 * @enum {string}
 */
export const ResultEnum = {
    /**
    * b2b-disallowed
    */
    Disallowed: 'b2b-disallowed',
    /**
    * b2b-error-no-contract
    */
    ErrorNoContract: 'b2b-error-no-contract',
    /**
    * b2b-error-no-product
    */
    ErrorNoProduct: 'b2b-error-no-product',
    /**
    * b2b-error-missing-enrollment-code
    */
    ErrorMissingEnrollmentCode: 'b2b-error-missing-enrollment-code',
    /**
    * b2b-error-invalid-enrollment-code
    */
    ErrorInvalidEnrollmentCode: 'b2b-error-invalid-enrollment-code',
    /**
    * b2b-error-requires-checkout
    */
    ErrorRequiresCheckout: 'b2b-error-requires-checkout',
    /**
    * b2b-enroll-success
    */
    EnrollSuccess: 'b2b-enroll-success'
};
/**
 * * `operator` - operator * `course` - course * `program` - program
 * @export
 * @enum {string}
 */
export const V1ProgramRequirementDataNodeTypeEnum = {
    /**
    * operator
    */
    Operator: 'operator',
    /**
    * course
    */
    Course: 'course',
    /**
    * program
    */
    Program: 'program'
};
/**
 * * `operator` - operator * `course` - course
 * @export
 * @enum {string}
 */
export const V2ProgramRequirementDataNodeTypeEnum = {
    /**
    * operator
    */
    Operator: 'operator',
    /**
    * course
    */
    Course: 'course'
};
/**
 * * `None` - ---- * `2` - Less than 2 years * `5` - 2-5 years * `10` - 6 - 10 years * `15` - 11 - 15 years * `20` - 16 - 20 years * `21` - More than 20 years * `0` - Prefer not to say
 * @export
 * @enum {number}
 */
export const YearsExperienceEnum = {
    /**
    * Less than 2 years
    */
    NUMBER_2: 2,
    /**
    * 2-5 years
    */
    NUMBER_5: 5,
    /**
    * 6 - 10 years
    */
    NUMBER_10: 10,
    /**
    * 11 - 15 years
    */
    NUMBER_15: 15,
    /**
    * 16 - 20 years
    */
    NUMBER_20: 20,
    /**
    * More than 20 years
    */
    NUMBER_21: 21,
    /**
    * Prefer not to say
    */
    NUMBER_0: 0
};
/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramRevokeCreate: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsProgramRevokeCreate', 'id', id);
            const localVarPath = `/api/records/program/{id}/revoke/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
         * @param {number} id
         * @param {PartnerSchoolRequest} PartnerSchoolRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramShareCreate: (id_1, PartnerSchoolRequest_1, ...args_1) => __awaiter(this, [id_1, PartnerSchoolRequest_1, ...args_1], void 0, function* (id, PartnerSchoolRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsProgramShareCreate', 'id', id);
            // verify required parameter 'PartnerSchoolRequest' is not null or undefined
            assertParamExists('apiRecordsProgramShareCreate', 'PartnerSchoolRequest', PartnerSchoolRequest);
            const localVarPath = `/api/records/program/{id}/share/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PartnerSchoolRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get learner record using program ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveById: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learnerRecordRetrieveById', 'id', id);
            const localVarPath = `/api/records/program/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get learner record using share UUID
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveByUuid: (uuid_1, ...args_1) => __awaiter(this, [uuid_1, ...args_1], void 0, function* (uuid, options = {}) {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('learnerRecordRetrieveByUuid', 'uuid', uuid);
            const localVarPath = `/api/records/shared/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function (configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration);
    return {
        /**
         * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramRevokeCreate(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRecordsProgramRevokeCreate(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiApi.apiRecordsProgramRevokeCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
         * @param {number} id
         * @param {PartnerSchoolRequest} PartnerSchoolRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramShareCreate(id, PartnerSchoolRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRecordsProgramShareCreate(id, PartnerSchoolRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiApi.apiRecordsProgramShareCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get learner record using program ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learnerRecordRetrieveById(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiApi.learnerRecordRetrieveById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get learner record using share UUID
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveByUuid(uuid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.learnerRecordRetrieveByUuid(uuid, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiApi.learnerRecordRetrieveByUuid']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ApiApiFp(configuration);
    return {
        /**
         * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
         * @param {ApiApiApiRecordsProgramRevokeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramRevokeCreate(requestParameters, options) {
            return localVarFp.apiRecordsProgramRevokeCreate(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
         * @param {ApiApiApiRecordsProgramShareCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramShareCreate(requestParameters, options) {
            return localVarFp.apiRecordsProgramShareCreate(requestParameters.id, requestParameters.PartnerSchoolRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get learner record using program ID
         * @param {ApiApiLearnerRecordRetrieveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveById(requestParameters, options) {
            return localVarFp.learnerRecordRetrieveById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get learner record using share UUID
         * @param {ApiApiLearnerRecordRetrieveByUuidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveByUuid(requestParameters, options) {
            return localVarFp.learnerRecordRetrieveByUuid(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
     * @param {ApiApiApiRecordsProgramRevokeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    apiRecordsProgramRevokeCreate(requestParameters, options) {
        return ApiApiFp(this.configuration).apiRecordsProgramRevokeCreate(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
     * @param {ApiApiApiRecordsProgramShareCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    apiRecordsProgramShareCreate(requestParameters, options) {
        return ApiApiFp(this.configuration).apiRecordsProgramShareCreate(requestParameters.id, requestParameters.PartnerSchoolRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get learner record using program ID
     * @param {ApiApiLearnerRecordRetrieveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    learnerRecordRetrieveById(requestParameters, options) {
        return ApiApiFp(this.configuration).learnerRecordRetrieveById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get learner record using share UUID
     * @param {ApiApiLearnerRecordRetrieveByUuidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    learnerRecordRetrieveByUuid(requestParameters, options) {
        return ApiApiFp(this.configuration).learnerRecordRetrieveByUuid(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * B2bApi - axios parameter creator
 * @export
 */
export const B2bApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Viewset for the ContractPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsList: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v0/b2b/contracts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for the ContractPage model.
         * @param {string} contract_slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsRetrieve: (contract_slug_1, ...args_1) => __awaiter(this, [contract_slug_1, ...args_1], void 0, function* (contract_slug, options = {}) {
            // verify required parameter 'contract_slug' is not null or undefined
            assertParamExists('b2bContractsRetrieve', 'contract_slug', contract_slug);
            const localVarPath = `/api/v0/b2b/contracts/{contract_slug}/`
                .replace(`{${"contract_slug"}}`, encodeURIComponent(String(contract_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create an enrollment for the given course run.
         * @param {string} readable_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bEnrollCreate: (readable_id_1, ...args_1) => __awaiter(this, [readable_id_1, ...args_1], void 0, function* (readable_id, options = {}) {
            // verify required parameter 'readable_id' is not null or undefined
            assertParamExists('b2bEnrollCreate', 'readable_id', readable_id);
            const localVarPath = `/api/v0/b2b/enroll/{readable_id}/`
                .replace(`{${"readable_id"}}`, encodeURIComponent(String(readable_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for the OrganizationPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsList: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v0/b2b/organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for the OrganizationPage model.
         * @param {string} organization_slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsRetrieve: (organization_slug_1, ...args_1) => __awaiter(this, [organization_slug_1, ...args_1], void 0, function* (organization_slug, options = {}) {
            // verify required parameter 'organization_slug' is not null or undefined
            assertParamExists('b2bOrganizationsRetrieve', 'organization_slug', organization_slug);
            const localVarPath = `/api/v0/b2b/organizations/{organization_slug}/`
                .replace(`{${"organization_slug"}}`, encodeURIComponent(String(organization_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * B2bApi - functional programming interface
 * @export
 */
export const B2bApiFp = function (configuration) {
    const localVarAxiosParamCreator = B2bApiAxiosParamCreator(configuration);
    return {
        /**
         * Viewset for the ContractPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.b2bContractsList(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['B2bApi.b2bContractsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Viewset for the ContractPage model.
         * @param {string} contract_slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsRetrieve(contract_slug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.b2bContractsRetrieve(contract_slug, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['B2bApi.b2bContractsRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Create an enrollment for the given course run.
         * @param {string} readable_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bEnrollCreate(readable_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.b2bEnrollCreate(readable_id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['B2bApi.b2bEnrollCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.b2bOrganizationsList(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['B2bApi.b2bOrganizationsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {string} organization_slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsRetrieve(organization_slug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.b2bOrganizationsRetrieve(organization_slug, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['B2bApi.b2bOrganizationsRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * B2bApi - factory interface
 * @export
 */
export const B2bApiFactory = function (configuration, basePath, axios) {
    const localVarFp = B2bApiFp(configuration);
    return {
        /**
         * Viewset for the ContractPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsList(options) {
            return localVarFp.b2bContractsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for the ContractPage model.
         * @param {B2bApiB2bContractsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsRetrieve(requestParameters, options) {
            return localVarFp.b2bContractsRetrieve(requestParameters.contract_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an enrollment for the given course run.
         * @param {B2bApiB2bEnrollCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bEnrollCreate(requestParameters, options) {
            return localVarFp.b2bEnrollCreate(requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsList(options) {
            return localVarFp.b2bOrganizationsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {B2bApiB2bOrganizationsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsRetrieve(requestParameters, options) {
            return localVarFp.b2bOrganizationsRetrieve(requestParameters.organization_slug, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * B2bApi - object-oriented interface
 * @export
 * @class B2bApi
 * @extends {BaseAPI}
 */
export class B2bApi extends BaseAPI {
    /**
     * Viewset for the ContractPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bContractsList(options) {
        return B2bApiFp(this.configuration).b2bContractsList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for the ContractPage model.
     * @param {B2bApiB2bContractsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bContractsRetrieve(requestParameters, options) {
        return B2bApiFp(this.configuration).b2bContractsRetrieve(requestParameters.contract_slug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an enrollment for the given course run.
     * @param {B2bApiB2bEnrollCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bEnrollCreate(requestParameters, options) {
        return B2bApiFp(this.configuration).b2bEnrollCreate(requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for the OrganizationPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bOrganizationsList(options) {
        return B2bApiFp(this.configuration).b2bOrganizationsList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for the OrganizationPage model.
     * @param {B2bApiB2bOrganizationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    b2bOrganizationsRetrieve(requestParameters, options) {
        return B2bApiFp(this.configuration).b2bOrganizationsRetrieve(requestParameters.organization_slug, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ChangeEmailsApi - axios parameter creator
 * @export
 */
export const ChangeEmailsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailRequestCreateRequest} ChangeEmailRequestCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsCreate: (ChangeEmailRequestCreateRequest_1, ...args_1) => __awaiter(this, [ChangeEmailRequestCreateRequest_1, ...args_1], void 0, function* (ChangeEmailRequestCreateRequest, options = {}) {
            // verify required parameter 'ChangeEmailRequestCreateRequest' is not null or undefined
            assertParamExists('changeEmailsCreate', 'ChangeEmailRequestCreateRequest', ChangeEmailRequestCreateRequest);
            const localVarPath = `/api/v0/change-emails/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ChangeEmailRequestCreateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code
         * @param {PatchedChangeEmailRequestUpdateRequest} [PatchedChangeEmailRequestUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsPartialUpdate: (code_1, PatchedChangeEmailRequestUpdateRequest_1, ...args_1) => __awaiter(this, [code_1, PatchedChangeEmailRequestUpdateRequest_1, ...args_1], void 0, function* (code, PatchedChangeEmailRequestUpdateRequest, options = {}) {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('changeEmailsPartialUpdate', 'code', code);
            const localVarPath = `/api/v0/change-emails/{code}/`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedChangeEmailRequestUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code
         * @param {ChangeEmailRequestUpdateRequest} ChangeEmailRequestUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsUpdate: (code_1, ChangeEmailRequestUpdateRequest_1, ...args_1) => __awaiter(this, [code_1, ChangeEmailRequestUpdateRequest_1, ...args_1], void 0, function* (code, ChangeEmailRequestUpdateRequest, options = {}) {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('changeEmailsUpdate', 'code', code);
            // verify required parameter 'ChangeEmailRequestUpdateRequest' is not null or undefined
            assertParamExists('changeEmailsUpdate', 'ChangeEmailRequestUpdateRequest', ChangeEmailRequestUpdateRequest);
            const localVarPath = `/api/v0/change-emails/{code}/`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(ChangeEmailRequestUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ChangeEmailsApi - functional programming interface
 * @export
 */
export const ChangeEmailsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ChangeEmailsApiAxiosParamCreator(configuration);
    return {
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailRequestCreateRequest} ChangeEmailRequestCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsCreate(ChangeEmailRequestCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeEmailsCreate(ChangeEmailRequestCreateRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ChangeEmailsApi.changeEmailsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code
         * @param {PatchedChangeEmailRequestUpdateRequest} [PatchedChangeEmailRequestUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsPartialUpdate(code, PatchedChangeEmailRequestUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeEmailsPartialUpdate(code, PatchedChangeEmailRequestUpdateRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ChangeEmailsApi.changeEmailsPartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code
         * @param {ChangeEmailRequestUpdateRequest} ChangeEmailRequestUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsUpdate(code, ChangeEmailRequestUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeEmailsUpdate(code, ChangeEmailRequestUpdateRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ChangeEmailsApi.changeEmailsUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ChangeEmailsApi - factory interface
 * @export
 */
export const ChangeEmailsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ChangeEmailsApiFp(configuration);
    return {
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailsApiChangeEmailsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsCreate(requestParameters, options) {
            return localVarFp.changeEmailsCreate(requestParameters.ChangeEmailRequestCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailsApiChangeEmailsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsPartialUpdate(requestParameters, options) {
            return localVarFp.changeEmailsPartialUpdate(requestParameters.code, requestParameters.PatchedChangeEmailRequestUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailsApiChangeEmailsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsUpdate(requestParameters, options) {
            return localVarFp.changeEmailsUpdate(requestParameters.code, requestParameters.ChangeEmailRequestUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ChangeEmailsApi - object-oriented interface
 * @export
 * @class ChangeEmailsApi
 * @extends {BaseAPI}
 */
export class ChangeEmailsApi extends BaseAPI {
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    changeEmailsCreate(requestParameters, options) {
        return ChangeEmailsApiFp(this.configuration).changeEmailsCreate(requestParameters.ChangeEmailRequestCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    changeEmailsPartialUpdate(requestParameters, options) {
        return ChangeEmailsApiFp(this.configuration).changeEmailsPartialUpdate(requestParameters.code, requestParameters.PatchedChangeEmailRequestUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    changeEmailsUpdate(requestParameters, options) {
        return ChangeEmailsApiFp(this.configuration).changeEmailsUpdate(requestParameters.code, requestParameters.ChangeEmailRequestUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get generator for countries/states list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesList: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v0/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function (configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration);
    return {
        /**
         * Get generator for countries/states list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.countriesList(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CountriesApi.countriesList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CountriesApiFp(configuration);
    return {
        /**
         * Get generator for countries/states list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesList(options) {
            return localVarFp.countriesList(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * Get generator for countries/states list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    countriesList(options) {
        return CountriesApiFp(this.configuration).countriesList(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CourseRunsApi - axios parameter creator
 * @export
 */
export const CourseRunsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * API view set for CourseRuns
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsList: (id_1, live_1, ...args_1) => __awaiter(this, [id_1, live_1, ...args_1], void 0, function* (id, live, options = {}) {
            const localVarPath = `/api/v1/course_runs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API view set for CourseRuns
         * @param {number} id A unique integer value identifying this course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsRetrieve: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('courseRunsRetrieve', 'id', id);
            const localVarPath = `/api/v1/course_runs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CourseRunsApi - functional programming interface
 * @export
 */
export const CourseRunsApiFp = function (configuration) {
    const localVarAxiosParamCreator = CourseRunsApiAxiosParamCreator(configuration);
    return {
        /**
         * API view set for CourseRuns
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsList(id, live, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.courseRunsList(id, live, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CourseRunsApi.courseRunsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * API view set for CourseRuns
         * @param {number} id A unique integer value identifying this course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.courseRunsRetrieve(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CourseRunsApi.courseRunsRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * CourseRunsApi - factory interface
 * @export
 */
export const CourseRunsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CourseRunsApiFp(configuration);
    return {
        /**
         * API view set for CourseRuns
         * @param {CourseRunsApiCourseRunsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsList(requestParameters = {}, options) {
            return localVarFp.courseRunsList(requestParameters.id, requestParameters.live, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for CourseRuns
         * @param {CourseRunsApiCourseRunsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsRetrieve(requestParameters, options) {
            return localVarFp.courseRunsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CourseRunsApi - object-oriented interface
 * @export
 * @class CourseRunsApi
 * @extends {BaseAPI}
 */
export class CourseRunsApi extends BaseAPI {
    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseRunsApi
     */
    courseRunsList(requestParameters = {}, options) {
        return CourseRunsApiFp(this.configuration).courseRunsList(requestParameters.id, requestParameters.live, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseRunsApi
     */
    courseRunsRetrieve(requestParameters, options) {
        return CourseRunsApiFp(this.configuration).courseRunsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List all courses - API v1
         * @param {boolean} [courserun_is_enrollable]
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live]
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesList: (courserun_is_enrollable_1, id_1, live_1, page_1, page__live_1, page_size_1, readable_id_1, ...args_1) => __awaiter(this, [courserun_is_enrollable_1, id_1, live_1, page_1, page__live_1, page_size_1, readable_id_1, ...args_1], void 0, function* (courserun_is_enrollable, id, live, page, page__live, page_size, readable_id, options = {}) {
            const localVarPath = `/api/v1/courses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (courserun_is_enrollable !== undefined) {
                localVarQueryParameter['courserun_is_enrollable'] = courserun_is_enrollable;
            }
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (page__live !== undefined) {
                localVarQueryParameter['page__live'] = page__live;
            }
            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }
            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a specific course - API v1
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesRetrieve: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1CoursesRetrieve', 'id', id);
            const localVarPath = `/api/v1/courses/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List all courses - API v2
         * @param {boolean} [courserun_is_enrollable] Course Run Is Enrollable
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {boolean} [include_approved_financial_aid] Include approved financial assistance information
         * @param {boolean} [live]
         * @param {number} [org_id] Only show courses belonging to this B2B/UAI organization
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live]
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesList: (courserun_is_enrollable_1, id_1, include_approved_financial_aid_1, live_1, org_id_1, page_1, page__live_1, page_size_1, readable_id_1, ...args_1) => __awaiter(this, [courserun_is_enrollable_1, id_1, include_approved_financial_aid_1, live_1, org_id_1, page_1, page__live_1, page_size_1, readable_id_1, ...args_1], void 0, function* (courserun_is_enrollable, id, include_approved_financial_aid, live, org_id, page, page__live, page_size, readable_id, options = {}) {
            const localVarPath = `/api/v2/courses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (courserun_is_enrollable !== undefined) {
                localVarQueryParameter['courserun_is_enrollable'] = courserun_is_enrollable;
            }
            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }
            if (include_approved_financial_aid !== undefined) {
                localVarQueryParameter['include_approved_financial_aid'] = include_approved_financial_aid;
            }
            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }
            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (page__live !== undefined) {
                localVarQueryParameter['page__live'] = page__live;
            }
            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }
            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a specific course - API v2
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesRetrieve: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2CoursesRetrieve', 'id', id);
            const localVarPath = `/api/v2/courses/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function (configuration) {
    const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration);
    return {
        /**
         * List all courses - API v1
         * @param {boolean} [courserun_is_enrollable]
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live]
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesList(courserun_is_enrollable, id, live, page, page__live, page_size, readable_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1CoursesList(courserun_is_enrollable, id, live, page, page__live, page_size, readable_id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CoursesApi.apiV1CoursesList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve a specific course - API v1
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1CoursesRetrieve(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CoursesApi.apiV1CoursesRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List all courses - API v2
         * @param {boolean} [courserun_is_enrollable] Course Run Is Enrollable
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {boolean} [include_approved_financial_aid] Include approved financial assistance information
         * @param {boolean} [live]
         * @param {number} [org_id] Only show courses belonging to this B2B/UAI organization
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live]
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesList(courserun_is_enrollable, id, include_approved_financial_aid, live, org_id, page, page__live, page_size, readable_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV2CoursesList(courserun_is_enrollable, id, include_approved_financial_aid, live, org_id, page, page__live, page_size, readable_id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CoursesApi.apiV2CoursesList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve a specific course - API v2
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV2CoursesRetrieve(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CoursesApi.apiV2CoursesRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CoursesApiFp(configuration);
    return {
        /**
         * List all courses - API v1
         * @param {CoursesApiApiV1CoursesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesList(requestParameters = {}, options) {
            return localVarFp.apiV1CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific course - API v1
         * @param {CoursesApiApiV1CoursesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesRetrieve(requestParameters, options) {
            return localVarFp.apiV1CoursesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all courses - API v2
         * @param {CoursesApiApiV2CoursesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesList(requestParameters = {}, options) {
            return localVarFp.apiV2CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.include_approved_financial_aid, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific course - API v2
         * @param {CoursesApiApiV2CoursesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesRetrieve(requestParameters, options) {
            return localVarFp.apiV2CoursesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * List all courses - API v1
     * @param {CoursesApiApiV1CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV1CoursesList(requestParameters = {}, options) {
        return CoursesApiFp(this.configuration).apiV1CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a specific course - API v1
     * @param {CoursesApiApiV1CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV1CoursesRetrieve(requestParameters, options) {
        return CoursesApiFp(this.configuration).apiV1CoursesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all courses - API v2
     * @param {CoursesApiApiV2CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV2CoursesList(requestParameters = {}, options) {
        return CoursesApiFp(this.configuration).apiV2CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.include_approved_financial_aid, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a specific course - API v2
     * @param {CoursesApiApiV2CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    apiV2CoursesRetrieve(requestParameters, options) {
        return CoursesApiFp(this.configuration).apiV2CoursesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List departments - v1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV1: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v1/departments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List departments - v2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV2: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v2/departments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get department details - v1
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV1: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentsRetrieveV1', 'id', id);
            const localVarPath = `/api/v1/departments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get department details - v2
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV2: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentsRetrieveV2', 'id', id);
            const localVarPath = `/api/v2/departments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * List departments - v1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV1(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.departmentsListV1(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DepartmentsApi.departmentsListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List departments - v2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV2(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.departmentsListV2(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DepartmentsApi.departmentsListV2']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get department details - v1
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV1(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.departmentsRetrieveV1(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DepartmentsApi.departmentsRetrieveV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get department details - v2
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV2(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.departmentsRetrieveV2(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DepartmentsApi.departmentsRetrieveV2']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DepartmentsApiFp(configuration);
    return {
        /**
         * List departments - v1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV1(options) {
            return localVarFp.departmentsListV1(options).then((request) => request(axios, basePath));
        },
        /**
         * List departments - v2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV2(options) {
            return localVarFp.departmentsListV2(options).then((request) => request(axios, basePath));
        },
        /**
         * Get department details - v1
         * @param {DepartmentsApiDepartmentsRetrieveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV1(requestParameters, options) {
            return localVarFp.departmentsRetrieveV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get department details - v2
         * @param {DepartmentsApiDepartmentsRetrieveV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV2(requestParameters, options) {
            return localVarFp.departmentsRetrieveV2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
export class DepartmentsApi extends BaseAPI {
    /**
     * List departments - v1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsListV1(options) {
        return DepartmentsApiFp(this.configuration).departmentsListV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List departments - v2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsListV2(options) {
        return DepartmentsApiFp(this.configuration).departmentsListV2(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get department details - v1
     * @param {DepartmentsApiDepartmentsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsRetrieveV1(requestParameters, options) {
        return DepartmentsApiFp(this.configuration).departmentsRetrieveV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get department details - v2
     * @param {DepartmentsApiDepartmentsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    departmentsRetrieveV2(requestParameters, options) {
        return DepartmentsApiFp(this.configuration).departmentsRetrieveV2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * EnrollmentsApi - axios parameter creator
 * @export
 */
export const EnrollmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * View to handle direct POST requests to enroll in a course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnrollmentsCreate: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API view set for user enrollments
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsCreate: (CourseRunEnrollmentRequest_1, ...args_1) => __awaiter(this, [CourseRunEnrollmentRequest_1, ...args_1], void 0, function* (CourseRunEnrollmentRequest, options = {}) {
            // verify required parameter 'CourseRunEnrollmentRequest' is not null or undefined
            assertParamExists('enrollmentsCreate', 'CourseRunEnrollmentRequest', CourseRunEnrollmentRequest);
            const localVarPath = `/api/v1/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CourseRunEnrollmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsDestroy: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enrollmentsDestroy', 'id', id);
            const localVarPath = `/api/v1/enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API view set for user enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsList: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v1/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Update enrollment email preferences
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {PatchedUpdateCourseRunEnrollmentRequest} [PatchedUpdateCourseRunEnrollmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsPartialUpdate: (id_1, PatchedUpdateCourseRunEnrollmentRequest_1, ...args_1) => __awaiter(this, [id_1, PatchedUpdateCourseRunEnrollmentRequest_1, ...args_1], void 0, function* (id, PatchedUpdateCourseRunEnrollmentRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enrollmentsPartialUpdate', 'id', id);
            const localVarPath = `/api/v1/enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedUpdateCourseRunEnrollmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsUpdate: (id_1, CourseRunEnrollmentRequest_1, ...args_1) => __awaiter(this, [id_1, CourseRunEnrollmentRequest_1, ...args_1], void 0, function* (id, CourseRunEnrollmentRequest, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enrollmentsUpdate', 'id', id);
            // verify required parameter 'CourseRunEnrollmentRequest' is not null or undefined
            assertParamExists('enrollmentsUpdate', 'CourseRunEnrollmentRequest', CourseRunEnrollmentRequest);
            const localVarPath = `/api/v1/enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CourseRunEnrollmentRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnrollmentsApi - functional programming interface
 * @export
 */
export const EnrollmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = EnrollmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * View to handle direct POST requests to enroll in a course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnrollmentsCreate(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiEnrollmentsCreate(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnrollmentsApi.apiEnrollmentsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * API view set for user enrollments
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsCreate(CourseRunEnrollmentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enrollmentsCreate(CourseRunEnrollmentRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnrollmentsApi.enrollmentsCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsDestroy(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enrollmentsDestroy(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnrollmentsApi.enrollmentsDestroy']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * API view set for user enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsList(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enrollmentsList(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnrollmentsApi.enrollmentsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Update enrollment email preferences
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {PatchedUpdateCourseRunEnrollmentRequest} [PatchedUpdateCourseRunEnrollmentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsPartialUpdate(id, PatchedUpdateCourseRunEnrollmentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enrollmentsPartialUpdate(id, PatchedUpdateCourseRunEnrollmentRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnrollmentsApi.enrollmentsPartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsUpdate(id, CourseRunEnrollmentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.enrollmentsUpdate(id, CourseRunEnrollmentRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnrollmentsApi.enrollmentsUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * EnrollmentsApi - factory interface
 * @export
 */
export const EnrollmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = EnrollmentsApiFp(configuration);
    return {
        /**
         * View to handle direct POST requests to enroll in a course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnrollmentsCreate(options) {
            return localVarFp.apiEnrollmentsCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {EnrollmentsApiEnrollmentsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsCreate(requestParameters, options) {
            return localVarFp.enrollmentsCreate(requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {EnrollmentsApiEnrollmentsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsDestroy(requestParameters, options) {
            return localVarFp.enrollmentsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsList(options) {
            return localVarFp.enrollmentsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update enrollment email preferences
         * @param {EnrollmentsApiEnrollmentsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsPartialUpdate(requestParameters, options) {
            return localVarFp.enrollmentsPartialUpdate(requestParameters.id, requestParameters.PatchedUpdateCourseRunEnrollmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {EnrollmentsApiEnrollmentsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsUpdate(requestParameters, options) {
            return localVarFp.enrollmentsUpdate(requestParameters.id, requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnrollmentsApi - object-oriented interface
 * @export
 * @class EnrollmentsApi
 * @extends {BaseAPI}
 */
export class EnrollmentsApi extends BaseAPI {
    /**
     * View to handle direct POST requests to enroll in a course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    apiEnrollmentsCreate(options) {
        return EnrollmentsApiFp(this.configuration).apiEnrollmentsCreate(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsCreate(requestParameters, options) {
        return EnrollmentsApiFp(this.configuration).enrollmentsCreate(requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsDestroy(requestParameters, options) {
        return EnrollmentsApiFp(this.configuration).enrollmentsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API view set for user enrollments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsList(options) {
        return EnrollmentsApiFp(this.configuration).enrollmentsList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update enrollment email preferences
     * @param {EnrollmentsApiEnrollmentsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsPartialUpdate(requestParameters, options) {
        return EnrollmentsApiFp(this.configuration).enrollmentsPartialUpdate(requestParameters.id, requestParameters.PatchedUpdateCourseRunEnrollmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    enrollmentsUpdate(requestParameters, options) {
        return EnrollmentsApiFp(this.configuration).enrollmentsUpdate(requestParameters.id, requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * PagesApi - axios parameter creator
 * @export
 */
export const PagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns pages of all types
         * @summary List all Wagtail Pages
         * @param {string} [fields] Specify fields (e.g. &#x60;*&#x60;)
         * @param {string} [type] Filter by Wagtail page type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesList: (fields_1, type_1, ...args_1) => __awaiter(this, [fields_1, type_1, ...args_1], void 0, function* (fields, type, options = {}) {
            const localVarPath = `/api/v2/pages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns details of a specific Wagtail page by ID
         * @summary Get Wagtail Page Details
         * @param {number} id ID of the Wagtail page
         * @param {number} [revision_id] Optional certificate revision ID to retrieve a specific revision of the certificate page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesRetrieve: (id_1, revision_id_1, ...args_1) => __awaiter(this, [id_1, revision_id_1, ...args_1], void 0, function* (id, revision_id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pagesRetrieve', 'id', id);
            const localVarPath = `/api/v2/pages/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (revision_id !== undefined) {
                localVarQueryParameter['revision_id'] = revision_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns pages of type cms.CertificatePage
         * @summary List all Certificate Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCertificatePageRetrieve: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v2/pages/?fields=*&type=cms.CertificatePage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns pages of type cms.CoursePage
         * @summary List all Course Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCoursePageRetrieve: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v2/pages/?fields=*&type=cms.CoursePage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns pages of type cms.ProgramPage
         * @summary List all Program Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsProgramPageRetrieve: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v2/pages/?fields=*&type=cms.ProgramPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PagesApi - functional programming interface
 * @export
 */
export const PagesApiFp = function (configuration) {
    const localVarAxiosParamCreator = PagesApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns pages of all types
         * @summary List all Wagtail Pages
         * @param {string} [fields] Specify fields (e.g. &#x60;*&#x60;)
         * @param {string} [type] Filter by Wagtail page type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesList(fields, type, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pagesList(fields, type, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PagesApi.pagesList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns details of a specific Wagtail page by ID
         * @summary Get Wagtail Page Details
         * @param {number} id ID of the Wagtail page
         * @param {number} [revision_id] Optional certificate revision ID to retrieve a specific revision of the certificate page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesRetrieve(id, revision_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pagesRetrieve(id, revision_id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PagesApi.pagesRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns pages of type cms.CertificatePage
         * @summary List all Certificate Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCertificatePageRetrieve(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pagesfieldstypecmsCertificatePageRetrieve(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PagesApi.pagesfieldstypecmsCertificatePageRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns pages of type cms.CoursePage
         * @summary List all Course Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCoursePageRetrieve(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pagesfieldstypecmsCoursePageRetrieve(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PagesApi.pagesfieldstypecmsCoursePageRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns pages of type cms.ProgramPage
         * @summary List all Program Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsProgramPageRetrieve(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pagesfieldstypecmsProgramPageRetrieve(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PagesApi.pagesfieldstypecmsProgramPageRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * PagesApi - factory interface
 * @export
 */
export const PagesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PagesApiFp(configuration);
    return {
        /**
         * Returns pages of all types
         * @summary List all Wagtail Pages
         * @param {PagesApiPagesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesList(requestParameters = {}, options) {
            return localVarFp.pagesList(requestParameters.fields, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details of a specific Wagtail page by ID
         * @summary Get Wagtail Page Details
         * @param {PagesApiPagesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesRetrieve(requestParameters, options) {
            return localVarFp.pagesRetrieve(requestParameters.id, requestParameters.revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pages of type cms.CertificatePage
         * @summary List all Certificate Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCertificatePageRetrieve(options) {
            return localVarFp.pagesfieldstypecmsCertificatePageRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pages of type cms.CoursePage
         * @summary List all Course Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCoursePageRetrieve(options) {
            return localVarFp.pagesfieldstypecmsCoursePageRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pages of type cms.ProgramPage
         * @summary List all Program Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsProgramPageRetrieve(options) {
            return localVarFp.pagesfieldstypecmsProgramPageRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PagesApi - object-oriented interface
 * @export
 * @class PagesApi
 * @extends {BaseAPI}
 */
export class PagesApi extends BaseAPI {
    /**
     * Returns pages of all types
     * @summary List all Wagtail Pages
     * @param {PagesApiPagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesList(requestParameters = {}, options) {
        return PagesApiFp(this.configuration).pagesList(requestParameters.fields, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns details of a specific Wagtail page by ID
     * @summary Get Wagtail Page Details
     * @param {PagesApiPagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesRetrieve(requestParameters, options) {
        return PagesApiFp(this.configuration).pagesRetrieve(requestParameters.id, requestParameters.revision_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns pages of type cms.CertificatePage
     * @summary List all Certificate Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesfieldstypecmsCertificatePageRetrieve(options) {
        return PagesApiFp(this.configuration).pagesfieldstypecmsCertificatePageRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns pages of type cms.CoursePage
     * @summary List all Course Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesfieldstypecmsCoursePageRetrieve(options) {
        return PagesApiFp(this.configuration).pagesfieldstypecmsCoursePageRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns pages of type cms.ProgramPage
     * @summary List all Program Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    pagesfieldstypecmsProgramPageRetrieve(options) {
        return PagesApiFp(this.configuration).pagesfieldstypecmsProgramPageRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ProgramCollectionsApi - axios parameter creator
 * @export
 */
export const ProgramCollectionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsList: (page_1, page_size_1, ...args_1) => __awaiter(this, [page_1, page_size_1, ...args_1], void 0, function* (page, page_size, options = {}) {
            const localVarPath = `/api/v2/program-collections/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} id A unique integer value identifying this Program Collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsRetrieve: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programCollectionsRetrieve', 'id', id);
            const localVarPath = `/api/v2/program-collections/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProgramCollectionsApi - functional programming interface
 * @export
 */
export const ProgramCollectionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProgramCollectionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsList(page, page_size, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programCollectionsList(page, page_size, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramCollectionsApi.programCollectionsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} id A unique integer value identifying this Program Collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programCollectionsRetrieve(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramCollectionsApi.programCollectionsRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ProgramCollectionsApi - factory interface
 * @export
 */
export const ProgramCollectionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProgramCollectionsApiFp(configuration);
    return {
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {ProgramCollectionsApiProgramCollectionsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsList(requestParameters = {}, options) {
            return localVarFp.programCollectionsList(requestParameters.page, requestParameters.page_size, options).then((request) => request(axios, basePath));
        },
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {ProgramCollectionsApiProgramCollectionsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsRetrieve(requestParameters, options) {
            return localVarFp.programCollectionsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProgramCollectionsApi - object-oriented interface
 * @export
 * @class ProgramCollectionsApi
 * @extends {BaseAPI}
 */
export class ProgramCollectionsApi extends BaseAPI {
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCollectionsApi
     */
    programCollectionsList(requestParameters = {}, options) {
        return ProgramCollectionsApiFp(this.configuration).programCollectionsList(requestParameters.page, requestParameters.page_size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCollectionsApi
     */
    programCollectionsRetrieve(requestParameters, options) {
        return ProgramCollectionsApiFp(this.configuration).programCollectionsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ProgramEnrollmentsApi - axios parameter creator
 * @export
 */
export const ProgramEnrollmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsDestroy: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programEnrollmentsDestroy', 'id', id);
            const localVarPath = `/api/v1/program_enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a unified set of program and course enrollments for the current user.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsList: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programEnrollmentsList', 'id', id);
            const localVarPath = `/api/v1/program_enrollments/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProgramEnrollmentsApi - functional programming interface
 * @export
 */
export const ProgramEnrollmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProgramEnrollmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsDestroy(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programEnrollmentsDestroy(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramEnrollmentsApi.programEnrollmentsDestroy']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a unified set of program and course enrollments for the current user.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsList(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programEnrollmentsList(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramEnrollmentsApi.programEnrollmentsList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ProgramEnrollmentsApi - factory interface
 * @export
 */
export const ProgramEnrollmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProgramEnrollmentsApiFp(configuration);
    return {
        /**
         * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
         * @param {ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsDestroy(requestParameters, options) {
            return localVarFp.programEnrollmentsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a unified set of program and course enrollments for the current user.
         * @param {ProgramEnrollmentsApiProgramEnrollmentsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsList(requestParameters, options) {
            return localVarFp.programEnrollmentsList(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProgramEnrollmentsApi - object-oriented interface
 * @export
 * @class ProgramEnrollmentsApi
 * @extends {BaseAPI}
 */
export class ProgramEnrollmentsApi extends BaseAPI {
    /**
     * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEnrollmentsApi
     */
    programEnrollmentsDestroy(requestParameters, options) {
        return ProgramEnrollmentsApiFp(this.configuration).programEnrollmentsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a unified set of program and course enrollments for the current user.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEnrollmentsApi
     */
    programEnrollmentsList(requestParameters, options) {
        return ProgramEnrollmentsApiFp(this.configuration).programEnrollmentsList(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List Programs - v1
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV1: (id_1, live_1, page_1, page_size_1, readable_id_1, ...args_1) => __awaiter(this, [id_1, live_1, page_1, page_size_1, readable_id_1, ...args_1], void 0, function* (id, live, page, page_size, readable_id, options = {}) {
            const localVarPath = `/api/v1/programs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }
            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * List Programs - v2
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {number} [org_id]
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live]
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV2: (id_1, live_1, org_id_1, page_1, page__live_1, page_size_1, readable_id_1, ...args_1) => __awaiter(this, [id_1, live_1, org_id_1, page_1, page__live_1, page_size_1, readable_id_1, ...args_1], void 0, function* (id, live, org_id, page, page__live, page_size, readable_id, options = {}) {
            const localVarPath = `/api/v2/programs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }
            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (page__live !== undefined) {
                localVarQueryParameter['page__live'] = page__live;
            }
            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }
            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API view set for Programs - v1
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV1: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programsRetrieveV1', 'id', id);
            const localVarPath = `/api/v1/programs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * API view set for Programs - v2
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV2: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programsRetrieveV2', 'id', id);
            const localVarPath = `/api/v2/programs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProgramsApiAxiosParamCreator(configuration);
    return {
        /**
         * List Programs - v1
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV1(id, live, page, page_size, readable_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsListV1(id, live, page, page_size, readable_id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramsApi.programsListV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * List Programs - v2
         * @param {number} [id]
         * @param {boolean} [live]
         * @param {number} [org_id]
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live]
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV2(id, live, org_id, page, page__live, page_size, readable_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsListV2(id, live, org_id, page, page__live, page_size, readable_id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramsApi.programsListV2']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * API view set for Programs - v1
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV1(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsRetrieveV1(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramsApi.programsRetrieveV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * API view set for Programs - v2
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV2(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.programsRetrieveV2(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProgramsApi.programsRetrieveV2']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProgramsApiFp(configuration);
    return {
        /**
         * List Programs - v1
         * @param {ProgramsApiProgramsListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV1(requestParameters = {}, options) {
            return localVarFp.programsListV1(requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Programs - v2
         * @param {ProgramsApiProgramsListV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV2(requestParameters = {}, options) {
            return localVarFp.programsListV2(requestParameters.id, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for Programs - v1
         * @param {ProgramsApiProgramsRetrieveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV1(requestParameters, options) {
            return localVarFp.programsRetrieveV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for Programs - v2
         * @param {ProgramsApiProgramsRetrieveV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV2(requestParameters, options) {
            return localVarFp.programsRetrieveV2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
    /**
     * List Programs - v1
     * @param {ProgramsApiProgramsListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsListV1(requestParameters = {}, options) {
        return ProgramsApiFp(this.configuration).programsListV1(requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List Programs - v2
     * @param {ProgramsApiProgramsListV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsListV2(requestParameters = {}, options) {
        return ProgramsApiFp(this.configuration).programsListV2(requestParameters.id, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API view set for Programs - v1
     * @param {ProgramsApiProgramsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsRetrieveV1(requestParameters, options) {
        return ProgramsApiFp(this.configuration).programsRetrieveV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * API view set for Programs - v2
     * @param {ProgramsApiProgramsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    programsRetrieveV2(requestParameters, options) {
        return ProgramsApiFp(this.configuration).programsRetrieveV2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UserSearchApi - axios parameter creator
 * @export
 */
export const UserSearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} [l] Number of results to return per page.
         * @param {number} [o] The initial index from which to return the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchList: (l_1, o_1, search_1, ...args_1) => __awaiter(this, [l_1, o_1, search_1, ...args_1], void 0, function* (l, o, search, options = {}) {
            const localVarPath = `/api/v0/user_search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (l !== undefined) {
                localVarQueryParameter['l'] = l;
            }
            if (o !== undefined) {
                localVarQueryParameter['o'] = o;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchRetrieve: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userSearchRetrieve', 'id', id);
            const localVarPath = `/api/v0/user_search/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UserSearchApi - functional programming interface
 * @export
 */
export const UserSearchApiFp = function (configuration) {
    const localVarAxiosParamCreator = UserSearchApiAxiosParamCreator(configuration);
    return {
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} [l] Number of results to return per page.
         * @param {number} [o] The initial index from which to return the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchList(l, o, search, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userSearchList(l, o, search, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserSearchApi.userSearchList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.userSearchRetrieve(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserSearchApi.userSearchRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * UserSearchApi - factory interface
 * @export
 */
export const UserSearchApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UserSearchApiFp(configuration);
    return {
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {UserSearchApiUserSearchListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchList(requestParameters = {}, options) {
            return localVarFp.userSearchList(requestParameters.l, requestParameters.o, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {UserSearchApiUserSearchRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchRetrieve(requestParameters, options) {
            return localVarFp.userSearchRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserSearchApi - object-oriented interface
 * @export
 * @class UserSearchApi
 * @extends {BaseAPI}
 */
export class UserSearchApi extends BaseAPI {
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchApi
     */
    userSearchList(requestParameters = {}, options) {
        return UserSearchApiFp(this.configuration).userSearchList(requestParameters.l, requestParameters.o, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchApi
     */
    userSearchRetrieve(requestParameters, options) {
        return UserSearchApiFp(this.configuration).userSearchRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserPartialUpdate: (PatchedUserRequest_1, ...args_1) => __awaiter(this, [PatchedUserRequest_1, ...args_1], void 0, function* (PatchedUserRequest, options = {}) {
            const localVarPath = `/api/v0/users/current_user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedUserRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserRetrieve: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v0/users/current_user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePartialUpdate: (PatchedUserRequest_1, ...args_1) => __awaiter(this, [PatchedUserRequest_1, ...args_1], void 0, function* (PatchedUserRequest, options = {}) {
            const localVarPath = `/api/v0/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedUserRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api/v0/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User retrieve viewsets
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRetrieve: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRetrieve', 'id', id);
            const localVarPath = `/api/v0/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserPartialUpdate(PatchedUserRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersCurrentUserPartialUpdate(PatchedUserRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersCurrentUserPartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserRetrieve(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersCurrentUserRetrieve(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersCurrentUserRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePartialUpdate(PatchedUserRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersMePartialUpdate(PatchedUserRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersMePartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersMeRetrieve(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersMeRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User retrieve viewsets
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRetrieve(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.usersRetrieve(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UsersApi.usersRetrieve']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {UsersApiUsersCurrentUserPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserPartialUpdate(requestParameters = {}, options) {
            return localVarFp.usersCurrentUserPartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserRetrieve(options) {
            return localVarFp.usersCurrentUserRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {UsersApiUsersMePartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePartialUpdate(requestParameters = {}, options) {
            return localVarFp.usersMePartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve(options) {
            return localVarFp.usersMeRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve viewsets
         * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRetrieve(requestParameters, options) {
            return localVarFp.usersRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersCurrentUserPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersCurrentUserPartialUpdate(requestParameters = {}, options) {
        return UsersApiFp(this.configuration).usersCurrentUserPartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersCurrentUserRetrieve(options) {
        return UsersApiFp(this.configuration).usersCurrentUserRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersMePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMePartialUpdate(requestParameters = {}, options) {
        return UsersApiFp(this.configuration).usersMePartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersMeRetrieve(options) {
        return UsersApiFp(this.configuration).usersMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User retrieve viewsets
     * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersRetrieve(requestParameters, options) {
        return UsersApiFp(this.configuration).usersRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=api.js.map